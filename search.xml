<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计划收藏表</title>
      <link href="/2021/06/09/%E8%AE%A1%E5%88%92%E6%94%B6%E8%97%8F%E8%A1%A8/"/>
      <url>/2021/06/09/%E8%AE%A1%E5%88%92%E6%94%B6%E8%97%8F%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="私人文章" />    <label for="pass">私人文章</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX18t1r2hLcHCjlPS3e+MkLkoPp58D5xD1QjY/dZnEV+rbRWtAQApV387HGmnGmTQW6Zh2U4kecmYNlr1tQtbeDaEiX8Upc/r9tfA/oY/zOchX/gvafZ+iYVUhWDimbGohDJ2r3mu6PE1wSAuz8oNGhNumAvrdnquhJPQj3JfOp1NVHSzVvWE2BWRKpcFG4sk8BeZ9fa9mZtq9ib+Bnv+7SURvcfEd0+1xTsolQOy3UJJIJQkKx+I8svpMOPma0GoznQy0rqZrOaxcYRh7MNLLcUZWXBjvYBCFmhkYIpysbd5EPqyPM0rWFaYDlgfeElL0gAv3yednkYfdVuHfpxS30lw6D8zy0pNOi8=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bzoj4033 [HAOI2015]树上染色 题解</title>
      <link href="/2019/11/05/bzoj4033/"/>
      <url>/2019/11/05/bzoj4033/</url>
      
        <content type="html"><![CDATA[<h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>有一棵点数为N的树，树边有边权。给你一个在0~N之内的正整数K，你要在这棵树中选择K个点，将其染成黑色，并</p><p>将其他的N-K个点染成白色。将所有点染色后，你会获得黑点两两之间的距离加上白点两两之间距离的和的收益。</p><p>问收益最大值是多少。</p><a id="more"></a><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>第一行两个整数N,K。</p><p>接下来N-1行每行三个正整数fr,to,dis，表示该树中存在一条长度为dis的边(fr,to)。</p><p>输入保证所有点之间是联通的。</p><p>N&lt;=2000,0&lt;=K&lt;=N</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p> 输出一个正整数，表示收益的最大值。 </p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">1 2 3</span><br><span class="line">1 5 1</span><br><span class="line">2 3 1</span><br><span class="line">2 4 2</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>比较难想的树形dp，设$dp_{u,i}$表示以$u$为根的子树把i个节点染成黑色对于整棵树的贡献，可以得到转移方程：</p><p>$dp_{u,i}=max(dp_{u,i-j}+dp_{v,j}+子树v内染色对整棵树的贡献)$</p><p>问题在于后者怎么计算，你会发现一棵子树内所有染色的点互相的贡献是已经计算完毕了的，那么考虑向上，不断累加edge即可，白色点算算补集就好了。</p><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> siz[maxn], n, k, head[maxn], ver[maxn &lt;&lt; <span class="number">1</span>], Nxt[maxn &lt;&lt; <span class="number">1</span>], edge[maxn &lt;&lt; <span class="number">1</span>], tot;</span><br><span class="line">ll dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> l)</span> </span>&#123; ver[++tot] = v, edge[tot] = l, Nxt[tot] = head[u], head[u] = tot; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dp[u][<span class="number">0</span>] = dp[u][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; i; i = Nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = ver[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; i; i = Nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = ver[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = min(k, siz[u]); j &gt;= <span class="number">0</span>; j--) &#123;      <span class="comment">// u的染色节点数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= min(j, siz[v]); l++) &#123;  <span class="comment">// v的</span></span><br><span class="line">                <span class="keyword">if</span> (dp[u][j - l] != <span class="number">-1</span>)</span><br><span class="line">                    dp[u][j] = max(dp[u][j], dp[u][j - l] + dp[v][l] +(ll) l * (ll)(k - l) *(ll) edge[i] +(ll)(siz[v] - l) *(ll) (n - k - siz[v] + l) *(ll) edge[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">  <span class="comment">//  freopen("tree.in","r",stdin);</span></span><br><span class="line">  <span class="comment">// freopen("tree.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, l;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;l);</span><br><span class="line">        add(u, v, l);</span><br><span class="line">        add(v, u, l);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, dp[<span class="number">1</span>][k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客10_29 乃爱与城市拥挤程度 题解</title>
      <link href="/2019/11/03/10-29-t2/"/>
      <url>/2019/11/03/10-29-t2/</url>
      
        <content type="html"><![CDATA[<h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><p><a href="https://ac.nowcoder.com/acm/problem/53976" target="_blank" rel="noopener">传送门</a></p><p>牛客复制太麻烦了.</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>换根dp，设$dp1_{i,k}$表示距离不超过k的节点数量,dp2表示对应的乘积. $那么应该可以得到其实每次转移时只需要对相邻两个节点的值进行操作。先dfs预处理出一个节点的所有子节点对于这两个数组的贡献，然后从1号节点开始转移并处理答案数组，换根时往子节点转移时先把两个节点已有的影响处理掉，也就是代码里的cut()，处理之后又要把原父节点当成子节点的一个儿子进行处理，就是link操作，dp完之后还要还原状态。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> dp1[maxn][<span class="number">12</span>],tot,n,k,head[maxn],Nxt[maxn&lt;&lt;<span class="number">1</span>],ver[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll dp2[maxn][<span class="number">12</span>],ans1[maxn],ans2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpower</span><span class="params">(ll a,ll p)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="keyword">if</span>(p&amp;(<span class="number">1L</span>L))res=(res*a%mod);</span><br><span class="line">a=(a*a%mod);</span><br><span class="line">p&gt;&gt;=(<span class="number">1L</span>L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>qpower(x,mod<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)dp1[u][i]+=dp1[v][i<span class="number">-1</span>];<span class="comment">//加上 </span></span><br><span class="line">ll sum=<span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++) sum+=dp1[v][i],dp2[v][i]=dp2[v][i]*sum%mod;<span class="comment">//累乘自己的影响 </span></span><br><span class="line">sum=<span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)sum+=dp1[u][i],dp2[u][i]=dp2[u][i]*sum%mod;<span class="comment">//同上 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)dp2[u][i]=dp2[u][i]*dp2[v][i<span class="number">-1</span>]%mod;<span class="comment">//乘上v对u的影响 </span></span><br><span class="line">&#125;<span class="comment">//连上 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)dp2[u][i]=dp2[u][i]*inv(dp2[v][i<span class="number">-1</span>])%mod;<span class="comment">//把以u为根里所有v对拥挤度乘积的贡献除掉 </span></span><br><span class="line">ll sum=<span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)sum+=dp1[u][i],dp2[u][i]=dp2[u][i]*inv(sum)%mod;<span class="comment">//把当前节点的所有影响给重置为子节点的 </span></span><br><span class="line">sum=<span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)sum+=dp1[v][i],dp2[v][i]=dp2[v][i]*inv(sum)%mod;<span class="comment">//同上 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)dp1[u][i]-=dp1[v][i<span class="number">-1</span>];<span class="comment">//减去v节点对于u拥挤度的影响 </span></span><br><span class="line">&#125;<span class="comment">//切断 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updateroot</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">cut(u,v);</span><br><span class="line">link(v,u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">dp1[u][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)dp2[u][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver[i];<span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)dp1[u][j]+=dp1[v][j<span class="number">-1</span>],dp2[u][j]=(dp2[u][j]*dp2[v][j<span class="number">-1</span>]%mod);</span><br><span class="line">&#125;</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)sum+=dp1[u][i],dp2[u][i]=(dp2[u][i]*sum%mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)ans1[u]+=dp1[u][i];</span><br><span class="line">ans2[u]=dp2[u][k];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver[i];<span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">updateroot(u,v);dfs2(v,u);updateroot(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);add(u,v),add(v,u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%lld%c"</span>,ans1[i],(i==n)?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%lld%c"</span>,ans2[i],(i==n)?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 换根dp </tag>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>noip2014 题解</title>
      <link href="/2019/10/29/noip2014/"/>
      <url>/2019/10/29/noip2014/</url>
      
        <content type="html"><![CDATA[<h4 id="这啥啊"><a href="#这啥啊" class="headerlink" title="这啥啊"></a>这啥啊</h4><a id="more"></a><p>周末做了以下14年联赛的题，之前一直听到有人说14年是水题大战我现在倒是理解为啥了……果然面向大众征题就是要打暴力么……</p><h4 id="T1-生活大爆炸版剪刀石头布"><a href="#T1-生活大爆炸版剪刀石头布" class="headerlink" title="T1 生活大爆炸版剪刀石头布"></a>T1 生活大爆炸版剪刀石头布</h4><h5 id="100"><a href="#100" class="headerlink" title="100%"></a>100%</h5><p>打一个所有可能的结果的表，然后直接模拟每一回合求得最终得分即可.</p><h5 id="code"><a href="#code" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ansa, ansb, n, A, B, sza[<span class="number">205</span>], szb[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> table[<span class="number">5</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("rps.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("rps.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;A, &amp;B);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= A; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sza[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= B; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;szb[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp1 = i % A, tmp2 = i % B;</span><br><span class="line">        <span class="keyword">if</span> (i % A == <span class="number">0</span>)</span><br><span class="line">            tmp1 = A;</span><br><span class="line">        <span class="keyword">if</span> (i % B == <span class="number">0</span>)</span><br><span class="line">            tmp2 = B;</span><br><span class="line">        <span class="keyword">int</span> u = sza[tmp1], v = szb[tmp2];</span><br><span class="line">        ansa += table[u][v], ansb += table[v][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, ansa, ansb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2-联合权值"><a href="#T2-联合权值" class="headerlink" title="T2 联合权值"></a>T2 联合权值</h4><h5 id="60"><a href="#60" class="headerlink" title="60%"></a>60%</h5><p>暴力枚举所有点对并求出他们的LCA来计算距离，如够为２就作为贡献累加到答案里。</p><h5 id="100-1"><a href="#100-1" class="headerlink" title="100%"></a>100%</h5><p>我们发现一个节点对答案（２个）产生贡献无非以下几种情况：</p><p>１，和它的兄弟节点对答案产生贡献；</p><p>２，和它的孙子节点对答案产生贡献；</p><p>３，和它的爷爷节点对答案产生贡献。</p><p>那么记录每一个节点的所有子节点权值之和，以及他的子节点权值的最大值，对于第１种情况，计算出权值和之后更新它的所有子节点的贡献，以及他的孙子节点对他的贡献。</p><p>最大值记录每个节点的最大和次大值，计算一次后往上更新爷爷的即可。</p><h5 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">10007</span>, maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n, tot, head[maxn], ver[maxn &lt;&lt; <span class="number">1</span>], Nxt[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">ll maxv[maxn], siz[maxn], val[maxn];</span><br><span class="line">ll ans, sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; ver[++tot] = v, Nxt[tot] = head[u], head[u] = tot; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>, siz[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//printf("%d %d\n",u,fa);</span></span><br><span class="line">    ll Mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; i; i = Nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = ver[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        siz[u] += val[v], Mx = max(Mx, val[v]);</span><br><span class="line">        <span class="keyword">if</span> (Mx &gt; maxv[u])</span><br><span class="line">            swap(maxv[u], Mx);</span><br><span class="line">        sum += (val[u] * siz[v] % mod * <span class="number">2</span>) % mod, ans = max(ans, maxv[v] * val[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = max(ans, Mx * maxv[u]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; i; i = Nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = ver[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        sum += (val[v] * (siz[u] - val[v]) % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("link.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("link.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        add(u, v);</span><br><span class="line">        add(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;val[i]);</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//test();</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld"</span>, ans, sum % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3-飞扬的小鸟"><a href="#T3-飞扬的小鸟" class="headerlink" title="T3 飞扬的小鸟"></a>T3 飞扬的小鸟</h4><h5 id="70"><a href="#70" class="headerlink" title="70%"></a>70%</h5><p>设$dp_{i,j}$为小鸟横坐标为i，纵坐标为ｊ时的最小点击次数。</p><p>可以得到转移方程</p><script type="math/tex; mode=display">dp_{i,j}=min(dp_{i-1,j+y_{i-1}},dp_{i-1,j-tx_{i-1}})</script><p>其中ｔ为枚举的点击次数，时间复杂度最坏情况下可能会被卡到$O(nm^2)$。</p><p>然后注意细节问题：一个横坐标有水管时的上下界以及高于ｍ无法再飞。</p><h5 id="100-2"><a href="#100-2" class="headerlink" title="100%"></a>100%</h5><p>可以发现点击次数在一个坐标上是没有限制的，但是飞到一定高度就不能继续上升了，于是上升的问题就变成了完全背包，下降就变为了０１背包，上升时转移方程就为</p><script type="math/tex; mode=display">dp_{i,j}=min(dp_{i-1,j-x_i}+1,dp_{i,j-x_i}+1)</script><p>然后就可以过ｔ掉的部分点了。</p><h5 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10005</span>, maxm = <span class="number">2050</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">int</span> cnt, dp[maxn][maxm], n, ans, m, k, x[maxn], y[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wp</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">&#125; sz[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(wp cp1, wp cp2)</span> </span>&#123; <span class="keyword">return</span> cp1.p &lt; cp2.p; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("bird10.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("bird.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x[i], &amp;y[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;sz[i].p, &amp;sz[i].l, &amp;sz[i].h), vis[sz[i].p] = i;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> xj = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (vis[i])</span><br><span class="line">            xj = sz[vis[i]].l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = x[i] + <span class="number">1</span>; j &lt;= m + x[i]; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i] &amp;&amp; j &gt;= sz[vis[i]].h)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dp[i][j] = min(dp[i - <span class="number">1</span>][j - x[i]] + <span class="number">1</span>, dp[i][j - x[i]] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = m + <span class="number">1</span>; j &lt;= m + x[i]; j++) dp[i][m] = min(dp[i][m], dp[i][j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = xj + <span class="number">1</span>; j &lt;= m - y[i]; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i] &amp;&amp; j &gt;= sz[vis[i]].h)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dp[i][j] = min(dp[i - <span class="number">1</span>][j + y[i]], dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= xj; j++) dp[i][j] = inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    ans = <span class="number">0x7ffffff</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[n][i] &lt; inf) &#123;</span><br><span class="line">            <span class="comment">// printf("yes");</span></span><br><span class="line">            ans = min(ans, dp[n][i]);</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(sz + <span class="number">1</span>, sz + k + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1\n%d"</span>, ans);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[sz[i].p][j] &lt; inf)</span><br><span class="line">                    cnt = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n%d"</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4-无线网络发射器选址"><a href="#T4-无线网络发射器选址" class="headerlink" title="T4 无线网络发射器选址"></a>T4 无线网络发射器选址</h4><h5 id="100-3"><a href="#100-3" class="headerlink" title="100%"></a>100%</h5><p>直接枚举所有坐标暴力找点。</p><h5 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;climits&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int d, n, cnt, ans;</span><br><span class="line">int vis[250][250];</span><br><span class="line">int main() &#123;</span><br><span class="line">    // freopen(&quot;wireless.in&quot;,&quot;r&quot;,stdin);</span><br><span class="line">    // freopen(&quot;wireless.out&quot;,&quot;w&quot;,stdout);</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;d, &amp;n);</span><br><span class="line">    for (register int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">        int x, y, l;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;, &amp;x, &amp;y, &amp;l);</span><br><span class="line">        vis[x][y] = l;</span><br><span class="line">    &#125;</span><br><span class="line">    for (register int i = 0; i &lt;= 128; i++) &#123;</span><br><span class="line">        for (register int j = 0; j &lt;= 128; j++) &#123;</span><br><span class="line">            int sum = 0;</span><br><span class="line">            int sx = max(0, i - d), sy = max(0, j - d), dx = min(128, i + d), dy = min(128, j + d);</span><br><span class="line">            //printf(&quot;%d %d %d %d\n&quot;,sx,sy,dx,dy);</span><br><span class="line">            for (register int l = sx; l &lt;= dx; l++) &#123;</span><br><span class="line">                for (register int r = sy; r &lt;= dy; r++) &#123;</span><br><span class="line">                    if (vis[l][r])</span><br><span class="line">                        sum += vis[l][r];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (sum == ans)</span><br><span class="line">                cnt++;</span><br><span class="line">            if (sum &gt; ans)</span><br><span class="line">                cnt = 1, ans = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d %d&quot;, cnt, ans);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T5-寻找道路"><a href="#T5-寻找道路" class="headerlink" title="T5 寻找道路"></a>T5 寻找道路</h4><h5 id="100-4"><a href="#100-4" class="headerlink" title="100%"></a>100%</h5><p>部分分应该是暴力枚举路径？懒得贴做法了。</p><p>能间接到达终点的点，在原图的反图上也一定能被ｎ点到达，那么以终点为起点在反图上搜索一次标记所有能到达的点。然后以给定起点进行bfs扩展，对于一个点是否合法，需要检查它能到达的其他点是否与ｎ连通，否则不选择扩展该点，如果存在合法路径输出答案即可。</p><h5 id="code-4"><a href="#code-4" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10005</span>, maxm = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn], s, t, n, m, head[maxn], ver[maxm &lt;&lt; <span class="number">1</span>], Nxt[maxm &lt;&lt; <span class="number">1</span>], tot;</span><br><span class="line"><span class="keyword">int</span> head_2[maxn], ver_2[maxm &lt;&lt; <span class="number">1</span>], Nxt_2[maxm &lt;&lt; <span class="number">1</span>], tot_2;</span><br><span class="line"><span class="keyword">bool</span> isok[maxn], vis[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; ver[++tot] = v, Nxt[tot] = head[u], head[u] = tot; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; ver_2[++tot_2] = v, Nxt_2[tot_2] = head_2[u], head_2[u] = tot_2; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    q.push(t);</span><br><span class="line">    isok[t] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head_2[u]; i; i = Nxt_2[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = ver_2[i];</span><br><span class="line">            <span class="keyword">if</span> (isok[v])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            isok[v] = <span class="literal">true</span>;</span><br><span class="line">            q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; i; i = Nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isok[ver[i]])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">bfs2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    q.push(s);</span><br><span class="line">    vis[s] = <span class="literal">true</span>, dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; i; i = Nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = ver[i];</span><br><span class="line">            <span class="keyword">if</span> (!isok[v] || !check(v) || vis[v])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            vis[v] = <span class="literal">true</span>;</span><br><span class="line">            q.push(v);</span><br><span class="line">            dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("road.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("road.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (u == v)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        add(u, v), add_2(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</span><br><span class="line">    bfs();</span><br><span class="line">    <span class="keyword">if</span> (!isok[s]) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bfs2();</span><br><span class="line">    <span class="keyword">if</span> (dis[t] == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, dis[t]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T6-解方程"><a href="#T6-解方程" class="headerlink" title="T6 解方程"></a>T6 解方程</h4><h5 id="30"><a href="#30" class="headerlink" title="30%"></a>30%</h5><p>暴力枚举出$[1,m]$中的所有数求解。</p><h5 id="50"><a href="#50" class="headerlink" title="50%"></a>50%</h5><p>在３０％的基础上套上高精度。</p><h5 id="100-5"><a href="#100-5" class="headerlink" title="100%"></a>100%</h5><p>你会发现这题的数大到高精度来算的话会很慢……</p><p>不过对于一个质数p， mod p 意义下将 x 与 x+p 带入方程左侧得到答案是相同的 ，那么我们需要选取一个较大的质数p(防止模数冲突)，将所有数都模上它再进行计算，但是还是会超时，因为方法实在是太暴力了……</p><p>有一个将一元n次多项式的求值问题转化为n个一次式的算法。，叫秦九韶。具体google一下吧。你会发现，这道题的式子完全可以套用秦九韶，于是函数化求解即可。</p><h5 id="code-5"><a href="#code-5" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">19260817</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, sz[<span class="number">205</span>], ans[<span class="number">205</span>], tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ll x = <span class="number">0</span>, neg = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            neg = <span class="number">-1</span>;</span><br><span class="line">    x = (ch - <span class="string">'0'</span>) % mod;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x * <span class="number">10</span> + (ch - <span class="string">'0'</span>)) % mod;</span><br><span class="line">    <span class="keyword">return</span> x * neg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) res = (res + sz[i]) * x % mod;</span><br><span class="line">    res = (res + sz[<span class="number">0</span>]) % mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) sz[i] = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (solve(i) == <span class="number">0</span>)</span><br><span class="line">            ans[++tot] = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tot);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 背包 </tag>
            
            <tag> 杂题 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10_23模拟赛 题解</title>
      <link href="/2019/10/27/10-23%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
      <url>/2019/10/27/10-23%E6%A8%A1%E6%8B%9F%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><p>以后或许会有。</p><a id="more"></a><h4 id="T1-NYG的动态数点"><a href="#T1-NYG的动态数点" class="headerlink" title="T1 NYG的动态数点"></a>T1 NYG的动态数点</h4><h5 id="60"><a href="#60" class="headerlink" title="60%"></a>60%</h5><p>枚举所有左端点，然后不断更新区间的gcd给他扫一遍过去，记录合法的最大区间长度及对应gcd，时间复杂度$O(n^2)$，期望得分60.</p><h5 id="100-std"><a href="#100-std" class="headerlink" title="100%(std)"></a>100%(std)</h5><p>用ST表预处理出区间gcd，以及区间最小值。</p><p>然后二分区间长度每一次check扫过去检查区间最小值是否等于区间gcd，时间复杂度$O(n log^2(n))$</p><h5 id="100-个人方法"><a href="#100-个人方法" class="headerlink" title="100%(个人方法)"></a>100%(个人方法)</h5><p>思考区间连续性，类似于单调栈，不过需要两个指针$head$和$now$，分别表示最后入栈的元素和当前的gcd，栈顶到栈底下标单调递减。</p><p>对于一个元素，如果它能整除当前的$now$，那么说明它一定比now更优，不断弹出能被它整除的栈顶并且累加弹出元素的贡献。</p><p>如果它能被当前的now整除，那么则$head++$并指向他，同时增加$now$的贡献。</p><p>如果不满足以上两者，那么说明前面一个区间的gcd无法继续更新答案，now和head都指向当前的元素即可。</p><p>时间复杂度O(n).</p><h5 id="code"><a href="#code" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500050</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,s[maxn],head,now,sz[maxn];</span><br><span class="line">ll ans,L[maxn],R[maxn],dn[maxn],num; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="number">0</span>)&#123;s[++head]=i,now=head;&#125;<span class="comment">//为空 </span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(sz[i]%sz[s[now]]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//printf("%lld %lld\n",sz[i],sz[s[now]]);</span></span><br><span class="line">R[s[now]]++;</span><br><span class="line">s[++head]=i;</span><br><span class="line">&#125;<span class="comment">//被now指向的数整除 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sz[s[now]]%sz[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(head&gt;<span class="number">0</span>&amp;&amp;sz[s[head]]%sz[i]==<span class="number">0</span>)&#123;</span><br><span class="line">L[i]+=(L[s[head]]+<span class="number">1</span>);</span><br><span class="line">head--;</span><br><span class="line">&#125;</span><br><span class="line">s[++head]=i,now=head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//整除now指向的数 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sz[i]%sz[s[now]]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(head&gt;<span class="number">0</span>&amp;&amp;head!=now)&#123;</span><br><span class="line"><span class="comment">//printf("Yes\n");</span></span><br><span class="line"><span class="keyword">if</span>(sz[s[head]]%sz[i]!=<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">L[i]+=(L[s[head]]+<span class="number">1</span>),head--;</span><br><span class="line">&#125;</span><br><span class="line">s[++head]=i,now=head;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updateans</span><span class="params">()</span></span>&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//if(sz[i]==1)&#123;printf("%lld i:%d %lld %lld\n",sz[i],i,L[i],R[i]);break;&#125;</span></span><br><span class="line"><span class="keyword">if</span>(L[i]+R[i]==ans)&#123;</span><br><span class="line">dn[++num]=i-L[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(L[i]+R[i]&gt;ans)&#123;</span><br><span class="line">ans=L[i]+R[i],num=<span class="number">0</span>,dn[++num]=i-L[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"point.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"point.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;sz[i]);</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line">updateans();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,num,ans);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,dn[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2-陶陶摘苹果"><a href="#T2-陶陶摘苹果" class="headerlink" title="T2 陶陶摘苹果"></a>T2 陶陶摘苹果</h4><h5 id="30"><a href="#30" class="headerlink" title="30%"></a>30%</h5><p>暴力枚举所有板凳更新区间来获得最大答案，期望得分30.</p><h5 id="100"><a href="#100" class="headerlink" title="100%"></a>100%</h5><p>发现$h_i$在$1e7$范围内，那么对于坐标做一个前缀和，记录每个坐标上的苹果数量。然后考虑dp，设$dp_{i,j}$为选了$i$个板凳最后一个编号为$j$时的苹果数量，那么可以得到转移方程：$dp_{i,j}=max(dp_{i-1,k}+sum_{j_r}-sum_{max(j_l-1,k_r)})$</p><p>然后直接做区间dp即可。</p><h5 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> ans,n,m,h,k,sum[maxn],dp[<span class="number">205</span>][<span class="number">205</span>],maxh=<span class="number">-1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chair</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l;<span class="keyword">int</span> r;</span><br><span class="line">&#125;sz[<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(chair cp1,chair cp2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cp1.r&lt;cp2.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"apple.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"apple.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;h,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> ap;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ap);</span><br><span class="line">ap-=h;<span class="keyword">if</span>(ap&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">sum[ap]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sz[i].l,&amp;sz[i].r),maxh=max(maxh,sz[i].r);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=maxh;i++)sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">sort(sz+<span class="number">1</span>,sz+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> p=i<span class="number">-1</span>;p&lt;j;p++)&#123;</span><br><span class="line">dp[i][j]=max(dp[i][j],dp[i<span class="number">-1</span>][p]+sum[sz[j].r]-sum[max(max(sz[j].l<span class="number">-1</span>,<span class="number">0</span>),sz[p].r)]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">ans=max(ans,dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3-简单无向图"><a href="#T3-简单无向图" class="headerlink" title="T3 简单无向图"></a>T3 简单无向图</h4><h5 id="20"><a href="#20" class="headerlink" title="20%"></a>20%</h5><p>暴力连边获得答案。</p><h5 id="100-1"><a href="#100-1" class="headerlink" title="100%"></a>100%</h5><p>dp数数题，因为整个图只有两种点，，那么不妨设第一种数量为$tot_1$,第二种数量为$tot_2$，然后设$dp_{i,j}$为度数1有i个，度数2有j个时的合法反感数，初始状态$dp_{0,0}=0$，然后先加一类点，再加二类点防止重复，那么需要分四种情况，利用图的组合计数即可得到答案。</p><h5 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">ll n,d[<span class="number">2005</span>],dp[<span class="number">2005</span>][<span class="number">2005</span>],tot1,tot2;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C2</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x * (x - <span class="number">1</span>) / <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"graph.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"graph.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;d[i]);</span><br><span class="line"><span class="keyword">if</span>(d[i]==<span class="number">1</span>)tot1++;</span><br><span class="line"><span class="keyword">if</span>(d[i]==<span class="number">2</span>)tot2++;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dp[i][j])<span class="keyword">continue</span>;</span><br><span class="line">ll &amp;now=dp[i][j];</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">0</span>)dp[i+<span class="number">2</span>][j]=((now*(i+<span class="number">1</span>)%mod)+dp[i+<span class="number">2</span>][j])%mod;</span><br><span class="line">dp[i+<span class="number">2</span>][j+<span class="number">1</span>]=(dp[i+<span class="number">2</span>][j+<span class="number">1</span>]+(now*C2(i+<span class="number">2</span>)%mod))%mod;</span><br><span class="line">dp[i][j+<span class="number">2</span>]=(dp[i][j+<span class="number">2</span>]+(now*i%mod*(j+<span class="number">1</span>)%mod))%mod;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">2</span>)</span><br><span class="line">dp[i<span class="number">-2</span>][j+<span class="number">3</span>]=(dp[i<span class="number">-2</span>][j+<span class="number">3</span>]+(now*C2(j+<span class="number">2</span>)%mod))%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,dp[tot1][tot2]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 模拟赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 单调栈 </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10_22模拟赛 题解</title>
      <link href="/2019/10/27/10-22%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
      <url>/2019/10/27/10-22%E6%A8%A1%E6%8B%9F%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><p>偷的题，联赛后如果没退役可能会随着数据一起传到仓库里。</p><a id="more"></a><h4 id="T1-图形变换"><a href="#T1-图形变换" class="headerlink" title="T1  图形变换"></a>T1  图形变换</h4><p>没有部分分。</p><h5 id="100"><a href="#100" class="headerlink" title="100%"></a>100%</h5><p>直接模拟就好，逆时针旋转90度可以看作顺时针旋转270度。</p><h5 id="code"><a href="#code" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,jz[<span class="number">350</span>][<span class="number">350</span>],rec[<span class="number">350</span>][<span class="number">350</span>],len;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">115</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> opt)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> xh=<span class="number">1</span>;xh&lt;=opt;xh++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">rec[j][n-i+<span class="number">1</span>]=jz[i][j];</span><br><span class="line"><span class="comment">//printf("%d %d %d %d\n",j,n-i+1,i,j);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(n,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)jz[i][j]=rec[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mirror</span><span class="params">(<span class="keyword">int</span> opt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=(m+<span class="number">1</span>)/<span class="number">2</span>;j++)&#123;</span><br><span class="line">swap(jz[i][j],jz[i][m-j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n+<span class="number">1</span>)/<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">swap(jz[i][j],jz[n-i+<span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;jz[i][j]),rec[i][j]=jz[i][j];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch+<span class="number">1</span>);len=<span class="built_in">strlen</span>(ch+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'A'</span>)&#123;</span><br><span class="line">turn(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'B'</span>)&#123;</span><br><span class="line">turn(<span class="number">3</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'C'</span>)&#123;</span><br><span class="line">mirror(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'D'</span>)&#123;</span><br><span class="line">mirror(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,jz[i][j]);</span><br><span class="line"><span class="keyword">if</span>(j!=m)<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2-分班"><a href="#T2-分班" class="headerlink" title="T2  分班"></a>T2  分班</h4><h5 id="40"><a href="#40" class="headerlink" title="40%"></a>40%</h5><p>$Average$是一个定值，可以直接求出来，观察评价指数的那个玩意儿，$X_i$也是定值，于是我们令$X_i-Average$的前缀和为$sum_i$，那么那个式子就可以作为比较好看的形式套到转移方程里。</p><p>设$dp_{i,j}$表示前j个小朋友分在i个班中的最小评价指数，那么不难得到转移方程：</p><p>$dp_{i,j}=min(dp_{i-1,k}+(sum_j-sum_k)G_i)$</p><p>时间复杂度$O(nm^2)$，期望得分40~50.</p><h5 id="100-1"><a href="#100-1" class="headerlink" title="100%"></a>100%</h5><p>观察40%的那个式子，很明显可以把$sum_jG_i$提出来。</p><p>那么就得到了：$dp_{i,j}=min(dp_{i-1,k}-sum_kG_i)+sum_jG_i$</p><p>那么就是单调队列优化的形式了……，直接套上去即可。但是注意要枚举状态更新最后要求的<strong>三个值</strong>。</p><p>时间复杂度$O(nm)$，STL的速度明显比手写队列要慢但应该卡不掉。</p><h5 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">10005</span>,maxn=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll sigma,clas,lst,T,m,n,A,B,G[maxn],X[maxm],sum[maxm],avg,jsq,dp[maxn][maxm];</span><br><span class="line"><span class="keyword">int</span> q[maxm],head,tail;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)dp[i][j]=(<span class="number">1L</span>L)&lt;&lt;<span class="number">60</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">sigma=((<span class="number">1L</span>L)&lt;&lt;<span class="number">60</span>),clas=<span class="number">0</span>,lst=<span class="number">0</span>,jsq=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;m,&amp;n,&amp;A,&amp;B);</span><br><span class="line"><span class="comment">//printf("%lld %lld\n",A,B);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;X[i]),jsq+=X[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;G[i]);</span><br><span class="line">init();</span><br><span class="line">avg=<span class="built_in">floor</span>((<span class="keyword">double</span>)(jsq)/(<span class="keyword">double</span>)m);</span><br><span class="line"><span class="comment">//printf("%lld avg:%lld\n",jsq,avg);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;sum[i]=sum[i<span class="number">-1</span>]+(X[i]-avg)*(X[i]-avg);&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//printf("i:%d\n",i);</span></span><br><span class="line">head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=i*A;j&lt;=min(m,i*B);j++)&#123;</span><br><span class="line"><span class="comment">//printf("j:%d \n",j);</span></span><br><span class="line"><span class="keyword">while</span>(head&lt;=tail&amp;&amp;(j-q[head]&gt;B))&#123;head++;&#125;</span><br><span class="line"><span class="keyword">while</span>(head&lt;=tail&amp;&amp;((dp[i<span class="number">-1</span>][q[tail]]-sum[q[tail]]*G[i])&gt;(dp[i<span class="number">-1</span>][j-A]-sum[j-A]*G[i])))&#123;tail--;&#125;</span><br><span class="line">q[++tail]=j-A;</span><br><span class="line">dp[i][j]=min(dp[i][j],dp[i<span class="number">-1</span>][q[head]]+G[i]*(sum[j]-sum[q[head]]));</span><br><span class="line"><span class="comment">//printf("zz:%d %d\n",head,tail);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i][m]&lt;sigma)&#123;</span><br><span class="line">sigma=dp[i][m];</span><br><span class="line">clas=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("find:%d %lld\n",i,sigma);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=m-B;i&lt;=m-A;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sigma==dp[clas<span class="number">-1</span>][i]-sum[i]*G[clas]+sum[m]*G[clas])lst=m-i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld %lld\n"</span>,sigma,clas,lst);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3-关于女朋友"><a href="#T3-关于女朋友" class="headerlink" title="T3 关于女朋友"></a>T3 关于女朋友</h4><h5 id="60"><a href="#60" class="headerlink" title="60%"></a>60%</h5><p>对于$n$和$m$较小的时候，直接跑两次最短路并暴力枚举路径即可，这样应该有30分。</p><p>同时对于$m=n-1$的点，可以直接在树上倍增进行询问操作，这样应该也有30分。</p><h5 id="100-2"><a href="#100-2" class="headerlink" title="100%"></a>100%</h5><p>考虑把60%的思路合并，以1和n分别为起点跑两种长度的最短路。构建出以1为根的最短路树，然后dfs一次求出树的各个节点深度以及预处理出$T_{i,j}$和$f_{i,j}$两个倍增数组，分别表示i节点向上走$2^{j}$能达到节点里的最短回家路径抑或能达到的点。</p><p>然后对于询问1，如果$k+1&gt;dep_x$那么无解，否则树上倍增求解</p><p>对于询问2，如果$k&gt;dis1_x$那么无解，否则树上倍增求解</p><h5 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>,maxm=<span class="number">200050</span>;</span><br><span class="line"><span class="keyword">int</span> lg[maxn],n,m,qy,dis1[maxn],lxt[maxm&lt;&lt;<span class="number">1</span>],dis2[maxn],head[maxn],ver[maxm&lt;&lt;<span class="number">1</span>],edge[maxm&lt;&lt;<span class="number">1</span>],Nxt[maxm&lt;&lt;<span class="number">1</span>],tot,pre[maxn];</span><br><span class="line"><span class="keyword">int</span> head_2[maxn],ver_2[maxm&lt;&lt;<span class="number">1</span>],Nxt_2[maxm&lt;&lt;<span class="number">1</span>],edge_2[maxm&lt;&lt;<span class="number">1</span>],tot_2;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn],f[maxn][<span class="number">20</span>],T[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> head_3[maxm&lt;&lt;<span class="number">1</span>],ver_3[maxm&lt;&lt;<span class="number">1</span>],edge_3[maxm&lt;&lt;<span class="number">1</span>],Nxt_3[maxm&lt;&lt;<span class="number">1</span>],tot_3;</span><br><span class="line"></span><br><span class="line">priority_queue&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,lxt[tot]=u,edge[tot]=l,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">ver_2[++tot_2]=v,edge_2[tot_2]=l,Nxt_2[tot_2]=head_2[u],head_2[u]=tot_2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_3</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">ver_3[++tot_3]=v,edge_3[tot_3]=l,Nxt_3[tot_3]=head_3[u],head_3[u]=tot_3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("u:%d\n",u);</span></span><br><span class="line">dep[u]=dep[fa]+<span class="number">1</span>,f[u][<span class="number">0</span>]=fa,T[u][<span class="number">0</span>]=dis2[f[u][<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">1</span>)f[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dep[u];i++)f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>],T[u][i]=min(T[u][i<span class="number">-1</span>],T[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head_3[u];i;i=Nxt_3[i])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver_3[i];</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis1[i]=INT_MAX;</span><br><span class="line">dis1[<span class="number">1</span>]=<span class="number">0</span>;q.push(make_pair(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.top().second;q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u],v=ver[i];i;i=Nxt[i],v=ver[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(dis1[v]&gt;dis1[u]+edge[i])&#123;</span><br><span class="line">pre[v]=i,dis1[v]=dis1[u]+edge[i];</span><br><span class="line">q.push(make_pair(-dis1[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis2[i]=INT_MAX;</span><br><span class="line">dis2[n]=<span class="number">0</span>;q.push(make_pair(<span class="number">0</span>,n));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.top().second;q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head_2[u],v=ver_2[i];i;i=Nxt_2[i],v=ver_2[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(dis2[v]&gt;dis2[u]+edge_2[i])&#123;</span><br><span class="line">dis2[v]=dis2[u]+edge_2[i];</span><br><span class="line">q.push(make_pair(-dis2[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dij2 checked </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=dis2[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=lg[n]<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[u][k]!=<span class="number">0</span>&amp;&amp;dep[f[u][k]]&gt;=lim)&#123;</span><br><span class="line">res=min(res,T[u][k]);</span><br><span class="line">u=f[u][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=dis2[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=lg[n]<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[u][k]!=<span class="number">0</span>&amp;&amp;dis1[f[u][k]]&gt;=lim)&#123;</span><br><span class="line">res=min(res,T[u][k]);</span><br><span class="line">u=f[u][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;qy);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,l1,l2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;u,&amp;v,&amp;l1,&amp;l2);</span><br><span class="line">add(u,v,l1),add(v,u,l1);</span><br><span class="line">add_2(u,v,l2),add_2(v,u,l2);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra();</span><br><span class="line">dijkstra2();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//printf("%d %d\n",dis1[i],dis2[i]);</span></span><br><span class="line"><span class="keyword">if</span>(pre[i])&#123;</span><br><span class="line"><span class="comment">//printf("%d %d\n",i,pre[i]);</span></span><br><span class="line">add_3(lxt[pre[i]],i,edge[pre[i]]);</span><br><span class="line">add_3(i,lxt[pre[i]],edge[pre[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)lg[i]=lg[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;lg[i<span class="number">-1</span>]==i);</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//for(register int i=1;i&lt;=n;i++)printf("%d ",dep[i]);</span></span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qy;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> opt,u,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;opt,&amp;u,&amp;k);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(k+<span class="number">1</span>&gt;dep[u])<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,solve1(u,k+<span class="number">1</span>));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(k&gt;dis1[u])<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,solve2(u,k));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 模拟赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> dijkstra </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 单调队列优化dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>noip2009 靶形数独 题解</title>
      <link href="/2019/10/26/%E9%9D%B6%E5%BD%A2%E6%95%B0%E7%8B%AC/"/>
      <url>/2019/10/26/%E9%9D%B6%E5%BD%A2%E6%95%B0%E7%8B%AC/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2591" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>小城和小华都是热爱数学的好学生，最近，他们不约而同地迷上了数独游戏，好胜的他们想用数独来一比高低。但普通的数独对他们来说都过于简单了，于是他们向 Z 博士请教， Z 博士拿出了他最近发明的「靶形数独」，作为这两个孩子比试的题目。</p><p>靶形数独的方格同普通数独一样，在 9格宽 9 格高 的大九宫格中有 9个 3格宽  3格高 的小九宫格（用粗黑色线隔开的）。在这个大九宫格中，有一些数字是已知的，根据这些数字，利用逻辑推理，在其他的空格上填入 1到 9数字。每个数字在每个小九宫格内不能 重复出现，每个数字在每行、每列也不能重复出现。但靶形数独有一点和普通数独不同，即 每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。（如图）</p><p><img src="https://i.loli.net/2018/05/22/5b03d2988a44a.png" alt></p><p>上图具体的分值分布是：里面一格（黄色区域）为10 分，黄色区域外面的一圈（红色区域）每个格子为9 分，再外面一圈（蓝色区域）每个格子为8 分，蓝色区域外面一圈（棕色区域）每个格子为7 分，外面一圈（白色区域）每个格子为6 分，如上图所示。</p><p>比赛的要求是：每个人必须完成一个给定的数独（每个给定数独可能有不同的填法），而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。</p><p>如图，在以下的这个已经填完数字的靶形数独游戏中，总分数为2829 。游戏规定，将以总分数的高低决出胜负。</p><p><img src="https://i.loli.net/2018/05/22/5b03d2989aa46.png" alt></p><p> 由于求胜心切，小城找到了善于编程的你，让你帮他求出，对于给定的靶形数独，能够得到的高分数。 </p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p> 输入一共9 行。每行 9个整数（每个数都在0—9 的范围内），表示一个尚未填满的数独方格，未填的空格用0表示。每两个数字之间用一个空格隔开。 </p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共1行。</p><p>输出可以得到的靶形数独的高分数。如果这个数独无解，则输出整数-1。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">7 0 0 9 0 0 0 0 1</span><br><span class="line">1 0 0 0 0 5 9 0 0</span><br><span class="line">0 0 0 2 0 0 0 8 0</span><br><span class="line">0 0 5 0 2 0 0 0 3</span><br><span class="line">0 0 0 0 0 0 6 4 8</span><br><span class="line">4 1 3 0 0 0 0 0 0</span><br><span class="line">0 0 7 0 0 2 0 9 0</span><br><span class="line">2 0 1 0 6 0 8 0 4</span><br><span class="line">0 8 0 5 0 4 0 1 2</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2829</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>类似于八皇后问题，对于每一行每一列以及当前这个小方阵能否放置当前的数字需要进行标记。</p><p>关键在于剪枝：</p><p>数据范围其实给了你提示，和每一行0的数量有关，那么开一个结构体记录每一行的原行号和0的数量，然后排个序，从0少的开始搜。</p><p>获得当前位置所在的方针编号和得分都不是很难想，具体看代码吧。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> jz[<span class="number">15</span>][<span class="number">15</span>],ans;</span><br><span class="line"><span class="keyword">int</span> sum,visx[<span class="number">15</span>][<span class="number">15</span>],visy[<span class="number">15</span>][<span class="number">15</span>],visg[<span class="number">15</span>][<span class="number">15</span>],zt[<span class="number">100</span>][<span class="number">2</span>],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tx=x/<span class="number">3</span>,ty=y/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(x%<span class="number">3</span>==<span class="number">0</span>)tx-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(y%<span class="number">3</span>!=<span class="number">0</span>)ty+=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">return</span> tx*<span class="number">3</span>+ty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getbonus</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>||y==<span class="number">1</span>||x==<span class="number">9</span>||y==<span class="number">9</span>)<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">2</span>||y==<span class="number">2</span>||x==<span class="number">8</span>||y==<span class="number">8</span>)<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">3</span>||y==<span class="number">3</span>||x==<span class="number">7</span>||y==<span class="number">7</span>)<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">4</span>||y==<span class="number">4</span>||x==<span class="number">6</span>||y==<span class="number">6</span>)<span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">row</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt,id;</span><br><span class="line">row()&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;xl[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("%d\n",pos);</span></span><br><span class="line"><span class="keyword">if</span>(pos&gt;cnt)&#123;</span><br><span class="line">ans=max(ans,now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> wc=getid(zt[pos][<span class="number">0</span>],zt[pos][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!visx[zt[pos][<span class="number">0</span>]][i]&amp;&amp;!visy[zt[pos][<span class="number">1</span>]][i]&amp;&amp;!visg[wc][i])&#123;</span><br><span class="line">visx[zt[pos][<span class="number">0</span>]][i]=visy[zt[pos][<span class="number">1</span>]][i]=visg[wc][i]=<span class="number">1</span>;</span><br><span class="line">dfs(pos+<span class="number">1</span>,now+i*getbonus(zt[pos][<span class="number">0</span>],zt[pos][<span class="number">1</span>]));</span><br><span class="line">visx[zt[pos][<span class="number">0</span>]][i]=visy[zt[pos][<span class="number">1</span>]][i]=visg[wc][i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(row cp1,row cp2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cp1.cnt&lt;cp2.cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">xl[i].id=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;jz[i][j]);</span><br><span class="line"><span class="comment">//printf("%d\n",jz[i][j]);</span></span><br><span class="line"><span class="keyword">if</span>(jz[i][j]==<span class="number">0</span>)&#123;xl[i].cnt++;<span class="keyword">continue</span>;&#125;</span><br><span class="line">visx[i][jz[i][j]]=<span class="number">1</span>,visy[j][jz[i][j]]=<span class="number">1</span>,visg[getid(i,j)][jz[i][j]]=<span class="number">1</span>;</span><br><span class="line">sum+=jz[i][j]*getbonus(i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(xl+<span class="number">1</span>,xl+<span class="number">10</span>,cmp);</span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line"><span class="comment">//for(register int i=1;i&lt;=9;i++)printf("%d ",xl[i].cnt);</span></span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(jz[xl[i].id][j]==<span class="number">0</span>)&#123;</span><br><span class="line">zt[++cnt][<span class="number">0</span>]=xl[i].id,zt[cnt][<span class="number">1</span>]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,sum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu2196 Computer 题解</title>
      <link href="/2019/10/26/hdu2196/"/>
      <url>/2019/10/26/hdu2196/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2196" target="_blank" rel="noopener">传送门</a></p><h4 id="Problem-Description-问题描述"><a href="#Problem-Description-问题描述" class="headerlink" title="Problem Description  问题描述"></a><strong>Problem Description</strong>  问题描述</h4><p> A school bought the first computer some time ago(so this computer’s id is 1). During the recent years the school bought N-1 new computers. Each new computer was connected to one of settled earlier. Managers of school are anxious about slow functioning of the net and want to know the maximum distance Si for which i-th computer needs to send signal (i.e. length of cable to the most distant computer). You need to provide this information. </p><p><img src="http://acm.hdu.edu.cn/data/images/C128-1005-1.JPG" alt="1"></p><p> Hint: the example input is corresponding to this graph. And from the graph, you can see that the computer 4 is farthest one from 1, so S1 = 3. Computer 4 and 5 are the farthest ones from 2, so S2 = 2. Computer 5 is the farthest one from 3, so S3 = 3. we also get S4 = 4, S5 = 4. </p><a id="more"></a><h4 id="Input-输入"><a href="#Input-输入" class="headerlink" title="Input 输入"></a>Input 输入</h4><p> Input file contains multiple test cases.In each case there is natural number N (N&lt;=10000) in the first line, followed by (N-1) lines with descriptions of computers. i-th line contains two natural numbers - number of computer, to which i-th computer is connected and length of cable used for connection. Total length of cable does not exceed 10^9. Numbers in lines of input are separated by a space. </p><h4 id="Output-输出"><a href="#Output-输出" class="headerlink" title="Output 输出"></a>Output 输出</h4><p> For each case output N lines. i-th line must contain number Si for i-th computer (1&lt;=i&lt;=N). </p><h4 id="Sample-Input-样例输入"><a href="#Sample-Input-样例输入" class="headerlink" title="Sample Input 样例输入"></a>Sample Input 样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br><span class="line">3 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h4 id="Sample-Output-样例输出"><a href="#Sample-Output-样例输出" class="headerlink" title="Sample Output 样例输出"></a>Sample Output 样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>树上最远距离-&gt;和直径有关系,把一颗树的任意一个节点的可能最远距离画出来,发现有两种情况:</p><p>另一个点是直径的一端,或者在自己的子树内.</p><p>即过根节点或者不过根节点.</p><p>那么设$dp_{u,0}$为以u为根的子树中最长链长度,$dp_{u,1}$为以u为根的子树中次大链长度,$dp_u,2$为不在u子树内的最大链长度。其中前两者可以由一次dfs得到。</p><p>那么$dp_{u,2}$可以得到转移方程:</p><script type="math/tex; mode=display">dp_{v,2}=max(dp_{u,1}+edge_i,dp_{u,2}+edge_i)   (当v在u子树内最长链时)</script><script type="math/tex; mode=display">dp_{v,2}=max(dp_{u,0}+edge_i,dp_{u,2}+edge_i)(当v在u子树内次长链时)</script><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>,maxm=<span class="number">10005</span>;</span><br><span class="line"><span class="keyword">int</span> lgst[maxn],dp[maxn][<span class="number">4</span>],tot,n,head[maxn],edge[maxm&lt;&lt;<span class="number">1</span>],ver[maxm&lt;&lt;<span class="number">1</span>],Nxt[maxm&lt;&lt;<span class="number">1</span>],dep[maxn],zcl;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">    ver[++tot]=v,edge[tot]=l,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("1:%d %d\n",u,fa);</span></span><br><span class="line">    dp[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> v=ver[i];<span class="keyword">if</span>(v==fa)    <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        <span class="keyword">if</span>(dp[u][<span class="number">0</span>]&lt;=dp[v][<span class="number">0</span>]+edge[i])&#123;</span><br><span class="line">dp[u][<span class="number">1</span>]=dp[u][<span class="number">0</span>],dp[u][<span class="number">0</span>]=dp[v][<span class="number">0</span>]+edge[i],lgst[u]=v;<span class="comment">//被最长更新 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[u][<span class="number">1</span>]&lt;dp[v][<span class="number">0</span>]+edge[i])dp[u][<span class="number">1</span>]=dp[v][<span class="number">0</span>]+edge[i];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dp[u][<span class="number">1</span>]&lt;dp[v][<span class="number">1</span>]+edge[i])dp[u][<span class="number">1</span>]=dp[v][<span class="number">1</span>]+edge[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("2:%d %d\n",u,fa);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver[i];<span class="keyword">if</span>(ver[i]==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(ver[i]==lgst[u])&#123;</span><br><span class="line">dp[v][<span class="number">2</span>]=max(dp[u][<span class="number">1</span>]+edge[i],dp[u][<span class="number">2</span>]+edge[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dp[v][<span class="number">2</span>]=max(dp[u][<span class="number">0</span>]+edge[i],dp[u][<span class="number">2</span>]+edge[i]);</span><br><span class="line">&#125;</span><br><span class="line">dfs2(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>)&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> u=<span class="number">2</span>;u&lt;=n;u++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v,l;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;v,&amp;l);add(u,v,l),add(v,u,l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(dp[i][<span class="number">0</span>],dp[i][<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形dp </tag>
            
            <tag> 树的直径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1312 mayan游戏</title>
      <link href="/2019/10/26/P1312/"/>
      <url>/2019/10/26/P1312/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P1312" target="_blank" rel="noopener">传送门</a></p><h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><p>这题题面复制太麻烦就只贴链接算了(半恼)</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>大爆搜，因为$n$很小所以你在函数里怎么乱搞模拟只要剪枝对了都能卡过去。</p><p>剪枝:题目要求输出方案字典序最小，因此优先往右拖方块，同时由于是从左到右遍历矩阵，如果$i$列$j$行和$i+1$列的这一行均有方块，你在第i列往右拖的状态和i+1往左拖得到的搜索树是完全一致的，所以只有当一个方块左边没有方块时才往左拖。</p><p>注意的地方：拖动后先更新整个矩阵的状态，然后再消除，消除的时候先打标记最后再一次性消，不然会出现本来该被消除但是留着的情况，同理消掉之后要更新状态，同时又可能产生新的被消除的方块。</p><p>要记录一下每一步的回溯状态（对应矩阵），然后在第$n$步的时候check一下是不是都消掉就好了。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,jz[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> rec[<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;<span class="keyword">int</span> y;<span class="keyword">int</span> neg;</span><br><span class="line">&#125;ans[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isok</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">7</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(jz[i][j])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">7</span>;j++)rec[step][i][j]=jz[i][j];</span><br><span class="line">&#125;<span class="comment">//记录</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">7</span>;j++)jz[i][j]=rec[step][i][j];</span><br><span class="line">&#125;<span class="comment">//回溯</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fall</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">7</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(jz[i][j]==<span class="number">0</span>)tmp++;</span><br><span class="line"><span class="keyword">if</span>(!tmp)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(jz[i][j])&#123;</span><br><span class="line">jz[i][j-tmp]=jz[i][j],jz[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//掉落</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> vis=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">7</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(jz[i][j]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(jz[i][j]==jz[i+<span class="number">1</span>][j]&amp;&amp;jz[i][j]==jz[i<span class="number">-1</span>][j])&#123;</span><br><span class="line">vis=<span class="literal">true</span>,flag[i][j]=flag[i+<span class="number">1</span>][j]=flag[i<span class="number">-1</span>][j]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(jz[i][j]==jz[i][j<span class="number">-1</span>]&amp;&amp;jz[i][j]==jz[i][j+<span class="number">1</span>])&#123;</span><br><span class="line">vis=<span class="literal">true</span>,flag[i][j]=flag[i][j+<span class="number">1</span>]=flag[i][j<span class="number">-1</span>]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">7</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i][j])jz[i][j]=<span class="number">0</span>,flag[i][j]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vis;</span><br><span class="line">&#125;<span class="comment">//消除</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> neg)</span></span>&#123;</span><br><span class="line">swap(jz[x][y],jz[x+neg][y]);</span><br><span class="line">fall();</span><br><span class="line"><span class="keyword">while</span>(remove())fall();</span><br><span class="line">&#125;<span class="comment">//拖</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isok())&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,ans[i].x<span class="number">-1</span>,ans[i].y<span class="number">-1</span>,ans[i].neg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&gt;n)<span class="keyword">return</span>;</span><br><span class="line">record(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">7</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(jz[i][j]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">1</span>&lt;=<span class="number">5</span>&amp;&amp;jz[i+<span class="number">1</span>][j]!=jz[i][j])&#123;</span><br><span class="line">move(i,j,<span class="number">1</span>);</span><br><span class="line">ans[x].x=i,ans[x].y=j,ans[x].neg=<span class="number">1</span>;</span><br><span class="line">dfs(x+<span class="number">1</span>);</span><br><span class="line">backtrack(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(jz[i<span class="number">-1</span>][j]==<span class="number">0</span>&amp;&amp;i<span class="number">-1</span>&gt;=<span class="number">1</span>)&#123;<span class="comment">//只有左边没有才拖</span></span><br><span class="line">move(i,j,<span class="number">-1</span>);</span><br><span class="line">ans[x].x=i,ans[x].y=j,ans[x].neg=<span class="number">-1</span>;</span><br><span class="line">dfs(x+<span class="number">1</span>);</span><br><span class="line">backtrack(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">8</span>;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">jz[i][j]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1040 加分二叉树 题解</title>
      <link href="/2019/10/25/P1040/"/>
      <url>/2019/10/25/P1040/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P1040" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>设一个n个节点的二叉树tree的中序遍历为（1,2,3,…,n），其中数字1,2,3,…,n为节点编号。每个节点都有一个分数（均为正整数），记第i<em>i</em>个节点的分数为di,tree及它的每个子树都有一个加分，任一棵子树subtree（也包含tree*本身）的加分计算方法如下：</p><p>subtree的左子树的加分× subtree的右子树的加分＋subtree的根的分数。</p><p>若某个子树为空，规定其加分为1，叶子的加分就是叶节点本身的分数。不考虑它的空子树。</p><p>试求一棵符合中序遍历为（1,2,3,…,n）且加分最高的二叉树tree。要求输出；</p><p>（1）tree的最高加分</p><p>（2）tree的前序遍历</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第1行：1个整数n(n&lt;30)，为节点个数。</p><p>第2行：n个用空格隔开的整数，为每个节点的分数（分数&lt;100）。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>第1行：1个整数，为最高加分（$ans \leq 4,000,000,000$）。</p><p>第2行：n个用空格隔开的整数，为该树的前序遍历。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>区间dp，要求前序遍历得首先把一个区间的根给他找出来……转移的同时记录一个区间的根，根据中序遍历的性质，那么对于任意一个区间$[l,r]$，其根为$root$，那么$[l,root-1]$为左子树，$[root+1,r]$为右子树，那么dp方程和遍历顺序都得到了确定：设$dp_{l,r}$为区间$[l,r]$构成树的最大加分，那么$dp_{l,r}=max(dp_{l,root-1}+dp_{root+1,r})$，其中root为枚举的根，跟着一起转移就好了。</p><p>最后递归输出就好。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,root[<span class="number">30</span>][<span class="number">30</span>],dp[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,root[l][r]);</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">solve(l,root[l][r]<span class="number">-1</span>);</span><br><span class="line">solve(root[l][r]+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;dp[i][i]),root[i][i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> siz=<span class="number">2</span>;siz&lt;=n;siz++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> l=<span class="number">1</span>;l+siz<span class="number">-1</span>&lt;=n;l++)&#123;</span><br><span class="line"><span class="keyword">int</span> r=l+siz<span class="number">-1</span>;</span><br><span class="line">dp[l][r]=dp[l+<span class="number">1</span>][r]+dp[l][l],root[l][r]=l;<span class="comment">//根为l </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=l+<span class="number">1</span>;k&lt;=r;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[l][r]&lt;dp[l][k<span class="number">-1</span>]*dp[k+<span class="number">1</span>][r]+dp[k][k])&#123;</span><br><span class="line">dp[l][r]=dp[l][k<span class="number">-1</span>]*dp[k+<span class="number">1</span>][r]+dp[k][k],root[l][r]=k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">1</span>][n]);</span><br><span class="line">solve(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5590&amp;&amp;CF241E 赛车游戏 题解</title>
      <link href="/2019/10/22/P5590/"/>
      <url>/2019/10/22/P5590/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P5590" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>R 君和小伙伴打算一起玩赛车。但他们被老司机 mocania 骗去了秋名山。</p><p>秋名山上有 n个点和 m条边，R 君和他的小伙伴要从点 1 出发开往点 n，每条边都有一个初始的方向。老司机 mocania 拿到了秋名山的地图但却不知道每条路有多长。显然，为了赛车游戏的公平，每条 1 到 n的路径应当是等长的。mocania 想，我就随便给边表上一个 1…9的长度，反正傻傻的 R 君也看不出来。</p><p>可 mocania 的数学不大好，不知道怎么给边标长度，只能跑来请教你这个 OI 高手了。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数 n,m。</p><p>接下来 m 行，每行两个整数 u,v，表示一条从 u 到 v 的有向边。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果无解或者不存在 1 到 n 的路径直接输出一个 -1。</p><p>如果有解第一行输出两个数 n,m，和输入文件中给出的相同。</p><p>借下来 m 行，每行三个整数 u,v,w，表示把从 u 到 v 的路径的长度设置为 w，其中 w 是一个 1…9的整数。要求所有边的出现顺序和题目中给出的相同。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 10</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br><span class="line">5 6</span><br><span class="line">6 7</span><br><span class="line">7 8</span><br><span class="line">8 9</span><br><span class="line">9 10</span><br><span class="line">1 10</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 10</span><br><span class="line">1 2 1</span><br><span class="line">2 3 1</span><br><span class="line">3 4 1</span><br><span class="line">4 5 1</span><br><span class="line">5 6 1</span><br><span class="line">6 7 1</span><br><span class="line">7 8 1</span><br><span class="line">8 9 1</span><br><span class="line">9 10 1</span><br><span class="line">1 10 9</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这题其实是<a href="http://codeforces.com/contest/241/problem/E" target="_blank" rel="noopener">CF241E</a></p><p>给你一张有向图，你会发现从$1$到$n$的所有边必须是在$1$到$n$的必经路径上，才会影响最后的答案，于是先在正反图上各dfs一次预处理出这种边。</p><p>然后剩下的事就是给必经路径标答案了，设$dis_i$为1号点到第$i$号点的最短距离，那么对于任意边$edge=(u,v)$以得到不等式$9\geq dis_u-dis_v\geq1$拆开可得</p><script type="math/tex; mode=display">dis_u-dis_v\geq1 \tag1</script><script type="math/tex; mode=display">dis_v-dis_u\geq-9 \tag2</script><p>于是很明显是差分约束的条件了。然后按我的不等式跑出来应该是最长路，非法反感判一下负环和连通性即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><del>写的很丑勉强看吧</del></p><p>下面这道是luogu的改编版，cf那道的提交记录丢这里：</p><p> <a href="http://codeforces.com/contest/241/submission/63060935" target="_blank" rel="noopener">http://codeforces.com/contest/241/submission/63060935</a> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>,maxm=<span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,tot,lxt[maxm&lt;&lt;<span class="number">1</span>],head[maxn],ver[maxm&lt;&lt;<span class="number">1</span>],Nxt[maxm&lt;&lt;<span class="number">1</span>],head_2[maxn],ver_2[maxm&lt;&lt;<span class="number">1</span>],Nxt_2[maxm&lt;&lt;<span class="number">1</span>],edge_2[maxm&lt;&lt;<span class="number">1</span>],tot_2;</span><br><span class="line"><span class="keyword">int</span> dis[maxn],ok[maxn];</span><br><span class="line"><span class="keyword">bool</span> inq[maxn],flag,pd[maxn],vis[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,Nxt[tot]=head[u],lxt[tot]=u,head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tot_3,head_3[maxm&lt;&lt;<span class="number">1</span>],ver_3[maxm&lt;&lt;<span class="number">1</span>],Nxt_3[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add3</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">ver_3[++tot_3]=v,Nxt_3[tot_3]=head_3[u],head_3[u]=tot_3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">ver_2[++tot_2]=v,edge_2[tot_2]=l,Nxt_2[tot_2]=head_2[u],head_2[u]=tot_2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;vis[u]=<span class="literal">true</span>;<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;<span class="keyword">if</span>(vis[ver[i]])<span class="keyword">continue</span>;dfs1(ver[i]);&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;pd[u]=<span class="literal">true</span>;<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head_3[u];i;i=Nxt_3[i])&#123;<span class="keyword">if</span>(pd[ver_3[i]])<span class="keyword">continue</span>;dfs2(ver_3[i]);&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=<span class="number">-999999999</span>;</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line">inq[<span class="number">1</span>]=<span class="literal">true</span>,dis[<span class="number">1</span>]=<span class="number">0</span>,ok[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line"><span class="comment">//printf("spfa:%d\n",u);</span></span><br><span class="line">inq[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head_2[u];i;i=Nxt_2[i])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver_2[i];</span><br><span class="line"><span class="keyword">if</span>(dis[v]&lt;dis[u]+edge_2[i])&#123;</span><br><span class="line">dis[v]=dis[u]+edge_2[i];</span><br><span class="line"><span class="comment">//printf("test1\n");</span></span><br><span class="line"><span class="keyword">if</span>(inq[v])<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//printf("test2\n");</span></span><br><span class="line">ok[v]++,inq[v]=<span class="literal">true</span>,q.push(v);</span><br><span class="line"><span class="keyword">if</span>(ok[v]&gt;n)&#123;flag=<span class="literal">true</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v),add1(u,v),add3(v,u);</span><br><span class="line">dfs1(<span class="number">1</span>),dfs2(n);</span><br><span class="line"><span class="keyword">if</span>(!pd[<span class="number">1</span>]||!vis[n])&#123;<span class="built_in">printf</span>(<span class="string">"-1"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="keyword">if</span>(vis[lxt[i]]&amp;&amp;pd[lxt[i]]&amp;&amp;vis[ver[i]]&amp;&amp;pd[ver[i]])add_2(lxt[i],ver[i],<span class="number">1</span>),add_2(ver[i],lxt[i],<span class="number">-9</span>);</span><br><span class="line">spfa();</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;<span class="built_in">printf</span>(<span class="string">"-1"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,n,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d "</span>,lxt[i],ver[i]);</span><br><span class="line"><span class="keyword">if</span>(vis[lxt[i]]&amp;&amp;pd[lxt[i]]&amp;&amp;vis[ver[i]]&amp;&amp;pd[ver[i]])&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[ver[i]]-dis[lxt[i]]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分约束 </tag>
            
            <tag> spfa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1993 小k的农场 题解</title>
      <link href="/2019/10/22/P1993/"/>
      <url>/2019/10/22/P1993/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P1993" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>小K在MC里面建立很多很多的农场，总共n个，以至于他自己都忘记了每个农场中种植作物的具体数量了，他只记得一些含糊的信息（共m个），以下列三种形式描述：</p><ul><li>农场a比农场b至少多种植了c个单位的作物，</li><li>农场a比农场b至多多种植了c个单位的作物，</li><li>农场a与农场b种植的作物数一样多。</li></ul><p>但是，由于小K的记忆有些偏差，所以他想要知道存不存在一种情况，使得农场的种植作物数量与他记忆中的所有信息吻合。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包括两个整数 n 和 m，分别表示农场数目和小 K 记忆中的信息数目。</p><p>接下来 m 行：</p><p>如果每行的第一个数是 1，接下来有 3 个整数 a,b,c，表示农场 a 比农场 b 至少多种植了 c 个单位的作物。</p><p>如果每行的第一个数是 2，接下来有 3 个整数 a,b,c，表示农场 a 比农场 b 至多多种植了 c 个单位的作物。如果每行的第一个数是 3，接下来有 2 个整数 a,b，表示农场 a 种植的的数量和 b 一样多。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p> 如果存在某种情况与小 K 的记忆吻合，输出“Yes”，否则输出“No”。 </p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">3 1 2</span><br><span class="line">1 1 3 1</span><br><span class="line">2 2 3 2</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>转换题目中的三个条件分别为:</p><script type="math/tex; mode=display">w_b-w_a\leq-c \tag1</script><script type="math/tex; mode=display">w_a-a_b\leq c \tag2</script><script type="math/tex; mode=display">{w_a-w_b\leq 0} {\and} {w_b-w_a \leq 0} \tag3</script><p>三个式子都可以变为差分约束的条件，根据转换出的小于等于连边后跑一遍spfa判负环即可得到结果。</p><p>然而毒瘤数据卡常规spfa……然后就学到了dfs版本的spfa（如下），时间复杂度极其不稳定，但是能卡过这题。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>,maxm=<span class="number">10005</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> inq[maxn],flag;</span><br><span class="line"><span class="keyword">int</span> s,dis[maxn],vis[maxn],head[maxn],ver[maxm&lt;&lt;<span class="number">1</span>],Nxt[maxm&lt;&lt;<span class="number">1</span>],edge[maxm&lt;&lt;<span class="number">1</span>],tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,edge[tot]=l,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)<span class="keyword">return</span>;</span><br><span class="line">inq[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u],v=ver[i];i;i=Nxt[i],v=ver[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+edge[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(inq[v])&#123;flag=<span class="literal">true</span>;<span class="keyword">return</span> ;&#125;</span><br><span class="line">dis[v]=dis[u]+edge[i];</span><br><span class="line">spfa(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">inq[u]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>,u,v,opt,l;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;l);</span><br><span class="line">add(u,v,-l);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;l);</span><br><span class="line">add(v,u,l);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">add(u,v,<span class="number">0</span>),add(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) spfa(i);</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;<span class="built_in">printf</span>(<span class="string">"No"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分约束 </tag>
            
            <tag> spfa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1023 税收与补贴问题 题解</title>
      <link href="/2019/10/22/P1023/"/>
      <url>/2019/10/22/P1023/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P1023" target="_blank" rel="noopener">传送门</a></p><h4 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h4><p>每样商品的价格越低，其销量就会相应增大。现已知某种商品的成本及其在若干价位上的销量（产品不会低于成本销售），并假设相邻价位间销量的变化是线性的且在价格高于给定的最高价位后，销量以某固定数值递减。（我们假设价格及销售量都是整数）</p><p>对于某些特殊商品，不可能完全由市场去调节其价格。这时候就需要政府以税收或补贴的方式来控制。（所谓税收或补贴就是对于每个产品收取或给予生产厂家固定金额的货币）</p><a id="more"></a><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>你是某家咨询公司的项目经理，现在你已经知道政府对某种商品的预期价格，以及在各种价位上的销售情况。要求你确定政府对此商品是应收税还是补贴的最少金额（也为整数），才能使商家在这样一种政府预期的价格上，获取相对其他价位上的最大总利润。</p><p>总利润=单位商品利润 \times× 销量</p><p>单位商品利润=单位商品价格 - 单位商品成本 （- 税金 or + 补贴）</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><del>真·阅读题</del></p><p>我把题意形式化地整理出来得到以下内容：</p><p>设补贴/税收的数量为x(正负即表明其是补贴/税收)对于任意不等于预期价的价格$w_i$及当时的销售量$sold_i$,可以得到不等式</p><p>$(预期价格-成本价+x)乘上预期销售量\ge (w_i-成本价+x)乘上sold_i$</p><p>整理后可得当$sold_i$大于预期销售量时，x有最大值，否则不等式可得x最小值。于是枚举i解不等式就好了。</p><p>但是由于给你的价格并不是所有的价格，所以还要整除求差来枚举所有不高于当前最高价格的价格及对应销量以及高于最高价格且销量不等于0的价格。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> pre,org,amt,del,yql;<span class="comment">//预期价,成本,初始量,减少量,预期价的销售量 </span></span><br><span class="line"><span class="keyword">int</span> tot,sz1[maxn],sz2[maxn],cnt,w[maxn],sold[maxn];</span><br><span class="line"><span class="keyword">double</span> minans,maxans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;pre,&amp;org,&amp;amt);</span><br><span class="line">sz1[++cnt]=org,sz2[cnt]=amt;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b)&amp;&amp;a!=<span class="number">-1</span>&amp;&amp;b!=<span class="number">-1</span>)&#123;sz1[++cnt]=a,sz2[cnt]=b;&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;del);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">w[++tot]=sz1[i],sold[tot]=sz2[i];</span><br><span class="line"><span class="keyword">if</span>(sz1[i+<span class="number">1</span>]-sz1[i]&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=(sz2[i+<span class="number">1</span>]-sz2[i])/(sz1[i+<span class="number">1</span>]-sz1[i]),xsl=sz2[i]+tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=sz1[i]+<span class="number">1</span>;j&lt;sz1[i+<span class="number">1</span>];j++)w[++tot]=j,sold[tot]=xsl,xsl+=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tmp1=sz1[cnt],tmp2=sz2[cnt];</span><br><span class="line"><span class="keyword">while</span>(tmp2&gt;=<span class="number">0</span>)&#123;w[++tot]=tmp1,sold[tot]=tmp2,tmp1+=<span class="number">1</span>,tmp2-=del;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;<span class="keyword">if</span>(w[i]==pre)&#123;yql=sold[i];<span class="keyword">break</span>;&#125;&#125;</span><br><span class="line">minans=<span class="number">-999999999</span>,maxans=<span class="number">999999999</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line"><span class="comment">//printf("%d %d\n",w[i],sold[i]);</span></span><br><span class="line"><span class="keyword">if</span>(sold[i]==yql)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(sold[i]-yql&gt;<span class="number">0</span>)maxans=min(maxans,(<span class="keyword">double</span>)((<span class="keyword">double</span>)((pre-org)*yql-(w[i]-org)*sold[i]))/(<span class="keyword">double</span>)(sold[i]-yql));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sold[i]-yql&lt;<span class="number">0</span>) minans=max(minans,(<span class="keyword">double</span>)((<span class="keyword">double</span>)((pre-org)*yql-(w[i]-org)*sold[i]))/(<span class="keyword">double</span>)(sold[i]-yql));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%d %d\n",pre,yql);</span></span><br><span class="line"><span class="comment">//printf("%lf %lf\n",minans,maxans);</span></span><br><span class="line"><span class="keyword">if</span>(minans&gt;maxans)&#123;<span class="built_in">printf</span>(<span class="string">"NO SOLUTION"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(minans&gt;<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"%d"</span>,(<span class="keyword">int</span>)<span class="built_in">ceil</span>(minans));<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxans&lt;<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"%d"</span>,(<span class="keyword">int</span>)<span class="built_in">floor</span>(maxans));<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2606 [ZJOI2010]排列计数 题解</title>
      <link href="/2019/10/20/P2606/"/>
      <url>/2019/10/20/P2606/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P2606" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>称一个1,2,…,N的排列P1,P2…,Pn是Magic的，当且仅当2&lt;=i&lt;=N时，Pi&gt;Pi/2. 计算1，2，…N的排列中有多少是Magic的，答案可能很大，只能输出模P以后的值 </p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p> 输入文件的第一行包含两个整数 n和p，含义如上所述。 </p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一行一个非负整数，表示答案。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">233 998244353</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">266181115</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>把这个玩意儿画在一条数轴上就会发现$P_i$的大小只会影响$P_{2i+1}$和$P_{2i}$的选择</p><p>然后考虑画一颗二叉树，发现节点$u$的左右儿子分别是2乘u和2乘u+1，那么整个二叉树的节点权值就是一颗小根堆。任意节点的左右子树互不影响。设$dp_u$表示以u为根的子树的合法摆放方案，那么就可以得到转移方程</p><p>$dp_u=C(siz_u,siz_{lson}-1)dp_{lson}dp_{rson}$</p><p>然后线性求一下阶乘的逆元就可以过了。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll mod,T,fac[maxn&lt;&lt;<span class="number">1</span>],inv[maxn&lt;&lt;<span class="number">1</span>],dp[maxn&lt;&lt;<span class="number">1</span>],siz[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">power</span><span class="params">(ll a,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="keyword">if</span>(p&amp;<span class="number">1</span>)res=res*a%mod;</span><br><span class="line">a=(a%mod*a%mod)%mod;</span><br><span class="line">p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">inv[T]=power(fac[T],mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=T<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)inv[i]=(inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>))%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)siz[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=T;i&gt;=<span class="number">2</span>;i--)siz[i&gt;&gt;<span class="number">1</span>]+=siz[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(ll n,ll m)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (((fac[n]*inv[m])%mod)*inv[n-m])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("perm.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("perm.out","w",stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;T,&amp;mod);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=T;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>((i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)&lt;=T)dp[i]=(C(siz[i]<span class="number">-1</span>,siz[i&lt;&lt;<span class="number">1</span>])*dp[i&lt;&lt;<span class="number">1</span>]%mod*dp[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%mod);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((i&lt;&lt;<span class="number">1</span>)&lt;=T)dp[i]=dp[i&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> dp[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,dp[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数列 题解</title>
      <link href="/2019/10/20/10-20-T1/"/>
      <url>/2019/10/20/10-20-T1/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>一个数列定义如下：f(1) = 1，f(2) = 1，f(n) = (A <em> f(n - 1) + B </em> f(n - 2)) mod 7。给定A,B和n的值，要求计算f(n)的值。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>一行包含3个整数A，B和n，其中(1≤ A, B ≤1000, 1 ≤n≤2100,000,000)。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一行一个整数表示答案</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">285 79 100</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>递推式都给你了，但是数据范围过大所以肯定是矩阵快速幂加速。可得到公式最后的矩阵$ans$为</p><script type="math/tex; mode=display">{\begin{vmatrix}A & B  \\1 & 0  \end{vmatrix}}^{k-2}*\begin{vmatrix}f(1) \\f(2)\end{vmatrix}=\begin{vmatrix}f(n)\\f(n-1)\end{vmatrix}</script><p>答案即为$ans_{1,1}$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> A,B;</span><br><span class="line">ll n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mat</span>&#123;</span></span><br><span class="line">ll a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> r,l;</span><br><span class="line">mat()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>;j++)a[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">mat <span class="keyword">friend</span> <span class="keyword">operator</span> *(mat cp1,mat cp2)&#123;</span><br><span class="line"><span class="comment">//printf("Yes\n");</span></span><br><span class="line">mat res;</span><br><span class="line">res.r=cp1.r,res.l=cp2.l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cp1.r;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cp2.l;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=cp1.l;k++)</span><br><span class="line">res.a[i][j]+=(cp1.a[i][k]*cp2.a[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=res.r;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=res.l;j++)&#123;</span><br><span class="line">res.a[i][j]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">mat <span class="keyword">friend</span> <span class="keyword">operator</span> ^(mat cp1,<span class="keyword">long</span> <span class="keyword">long</span> b)&#123;</span><br><span class="line">mat res;</span><br><span class="line">res.r=cp1.r,res.l=cp1.l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)res.a[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1L</span>L)res=res*cp1;</span><br><span class="line">cp1=cp1*cp1;</span><br><span class="line">b&gt;&gt;=(<span class="number">1L</span>L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("sequence.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("sequence.out","w",stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;A,&amp;B,&amp;n);</span><br><span class="line">mat tmp,jz1,jz2,ans;</span><br><span class="line">jz1.r=<span class="number">2</span>,jz1.l=<span class="number">2</span>,jz2.r=<span class="number">2</span>,jz2.l=<span class="number">1</span>;</span><br><span class="line">jz1.a[<span class="number">1</span>][<span class="number">1</span>]=A,jz1.a[<span class="number">1</span>][<span class="number">2</span>]=B,jz1.a[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>,jz1.a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">0</span>,jz2.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>,jz2.a[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">tmp=jz1^(n<span class="number">-2</span>);</span><br><span class="line">ans=tmp*jz2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans.a[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵 </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1341 无序字母对 题解</title>
      <link href="/2019/10/15/P1341/"/>
      <url>/2019/10/15/P1341/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P1341" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定n个各不相同的无序字母对（区分大小写，无序即字母对中的两个字母可以位置颠倒）。请构造一个有n+1个字母的字符串使得每个字母对都在这个字符串中出现。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入一个正整数n。</p><p>以下n行每行两个字母，表示这两个字母需要相邻。</p><a id="more"></a><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出满足要求的字符串。</p><p>如果没有满足要求的字符串，请输出“No Solution”。</p><p>如果有多种方案，请输出前面的字母的ASCII编码尽可能小的（字典序最小）的方案</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">aZ</span><br><span class="line">tZ</span><br><span class="line">Xt</span><br><span class="line">aX</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XaZtX</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>欧拉回路的入门题。把问题抽象化成图，可以把一个字母（区分大小写）当成节点，然后朝任意两个需要相邻的字母连一条边，然后发现只要该图是一张欧拉图那么其中的欧拉回路就是满足题目条件的解法。于是判连通和奇数度数点数，dfs枚举一遍将点全部放入栈中后输出即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">250</span>,maxm=<span class="number">10005</span>;</span><br><span class="line"><span class="keyword">int</span> n,edge[maxn][maxn],tot,deg[maxn],st;</span><br><span class="line"><span class="keyword">bool</span> pd[maxn],flag;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">pd[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="string">'z'</span>-<span class="string">'A'</span>+<span class="number">1</span>;i++)<span class="keyword">if</span>(edge[u][i]&amp;&amp;!pd[i])dfs1(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="string">'z'</span>-<span class="string">'A'</span>+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(edge[u][i])&#123;</span><br><span class="line">edge[u][i]--;</span><br><span class="line">edge[i][u]--;</span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s.push(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">tot=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch+<span class="number">1</span>);</span><br><span class="line">edge[ch[<span class="number">1</span>]-<span class="string">'A'</span>+<span class="number">1</span>][ch[<span class="number">2</span>]-<span class="string">'A'</span>+<span class="number">1</span>]++,edge[ch[<span class="number">2</span>]-<span class="string">'A'</span>+<span class="number">1</span>][ch[<span class="number">1</span>]-<span class="string">'A'</span>+<span class="number">1</span>]++;</span><br><span class="line">deg[ch[<span class="number">1</span>]-<span class="string">'A'</span>+<span class="number">1</span>]++,deg[ch[<span class="number">2</span>]-<span class="string">'A'</span>+<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> st=<span class="number">0</span>,jsq=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="string">'z'</span>-<span class="string">'A'</span>+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(deg[i]%<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)flag=<span class="literal">true</span>,st=i;</span><br><span class="line">jsq++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(deg[i]&amp;&amp;st==<span class="number">0</span>)st=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(jsq&gt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No Solution"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs1(st);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="string">'z'</span>-<span class="string">'A'</span>+<span class="number">1</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(deg[i]&amp;&amp;!pd[i])&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No Solution"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(st);</span><br><span class="line"><span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,s.top()+<span class="string">'A'</span><span class="number">-1</span>);</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欧拉回路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj3311 Hie with the pie 题解</title>
      <link href="/2019/10/15/poj3311/"/>
      <url>/2019/10/15/poj3311/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://poj.org/problem?id=3311" target="_blank" rel="noopener">传送门</a></p><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>The Pizazz Pizzeria prides itself in delivering pizzas to its customers as fast as possible. Unfortunately, due to cutbacks, they can afford to hire only one driver to do the deliveries. He will wait for 1 or more (up to 10) orders to be processed before he starts any deliveries. Needless to say, he would like to take the shortest route in delivering these goodies and returning to the pizzeria, even if it means passing the same location(s) or the pizzeria more than once on the way. He has commissioned you to write a program to help him.</p><a id="more"></a><h5 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h5><p>有一个快递员要把皮萨依次送到n个城市并且最后回到起点,可以多次经过任意路径,问最小时间总和.</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>Input will consist of multiple test cases. The first line will contain a single integer <em>n</em> indicating the number of orders to deliver, where 1 ≤ <em>n</em> ≤ 10. After this will be <em>n</em> + 1 lines each containing <em>n</em> + 1 integers indicating the times to travel between the pizzeria (numbered 0) and the <em>n</em> locations (numbers 1 to <em>n</em>). The <em>j</em>th value on the <em>i</em>th line indicates the time to go directly from location <em>i</em> to location <em>j</em> without visiting any other locations along the way. Note that there may be quicker ways to go from <em>i</em> to <em>j</em> via other locations, due to different speed limits, traffic lights, etc. Also, the time values may not be symmetric, i.e., the time to go directly from location <em>i</em> to <em>j</em> may not be the same as the time to go directly from location <em>j</em> to <em>i</em>. An input value of <em>n</em> = 0 will terminate input.</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>For each test case, you should output a single number indicating the minimum time to deliver all of the pizzas and return to the pizzeria.</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 1 10 10</span><br><span class="line">1 0 1 2</span><br><span class="line">10 1 0 10</span><br><span class="line">10 2 10 0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>类似于TSP旅行商问题,区别在于这道题一个城市可以经过多次。就算不知道TSP问题根据n范围应该也能想到是个状压，然后根据可以多次经过一个城市的性质用floyd预处理出一个$dis_{i,j}$数组表示任意两点间的最短距离</p><p>设$dp_{i,j}$表示状态编号为$i$的情况下经过的所有点且最后一个经过的城市编号为$j$时的最小时间总和，可得到转移方程$dp_{i,j}=max(dp_{i,j}+dis{j,k},dp_{i|(1&lt;&lt;(k-1)),k})$</p><p>由于需要回到原点所以目标状态就为$ans=dp_{2^n-1,i}+dis_{i,0}$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="刷表"><a href="#刷表" class="headerlink" title="刷表"></a>刷表</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,dis[<span class="number">15</span>][<span class="number">15</span>],dp[<span class="number">1</span>&lt;&lt;<span class="number">11</span>][<span class="number">15</span>],maxstate,ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>&amp;&amp;n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)dis[i][j]=INT_MAX;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;dis[i][j]);</span><br><span class="line">maxstate=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>,ans=INT_MAX;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n;k++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxstate;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)dp[i][j]=INT_MAX;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dp[<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)][i]=dp[<span class="number">0</span>][<span class="number">0</span>]+dis[<span class="number">0</span>][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=maxstate;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!(i&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))))<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">int</span> to=i|(<span class="number">1</span>&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;(k<span class="number">-1</span>)))<span class="keyword">continue</span>;</span><br><span class="line">dp[to][k]=min(dp[to][k],dp[i][j]+dis[j][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans=min(ans,dp[maxstate][i]+dis[i][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="填表"><a href="#填表" class="headerlink" title="填表"></a>填表</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,s[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">ll dp[<span class="number">2100</span>][<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>&amp;&amp;n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">s[i][j]=min(s[i][j],s[i][k]+s[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> state=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=state;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;(k<span class="number">-1</span>)))&#123;</span><br><span class="line"><span class="keyword">if</span>(i==(<span class="number">1</span>&lt;&lt;(k<span class="number">-1</span>)))&#123;</span><br><span class="line">dp[i][k]=s[<span class="number">0</span>][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">dp[i][k]=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j!=k)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)))&#123;</span><br><span class="line">dp[i][k]=min(dp[i][k],dp[i^(<span class="number">1</span>&lt;&lt;(k<span class="number">-1</span>))][j]+s[j][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//printf("%d\n",dp[(1&lt;&lt;n)-1][i]);</span></span><br><span class="line">ans=min(ans,dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>][i]+s[i][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压dp </tag>
            
            <tag> floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1273 有线电视台 题解</title>
      <link href="/2019/10/14/P1273/"/>
      <url>/2019/10/14/P1273/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P1273" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>某收费有线电视网计划转播一场重要的足球比赛。他们的转播网和用户终端构成一棵树状结构，这棵树的根结点位于足球比赛的现场，树叶为各个用户终端，其他中转站为该树的内部节点。</p><p>从转播站到转播站以及从转播站到所有用户终端的信号传输费用都是已知的，一场转播的总费用等于传输信号的费用总和。</p><p>现在每个用户都准备了一笔费用想观看这场精彩的足球比赛，有线电视网有权决定给哪些用户提供信号而不给哪些用户提供信号。</p><p>写一个程序找出一个方案使得有线电视网在不亏本的情况下使观看转播的用户尽可能多。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入文件的第一行包含两个用空格隔开的整数N和M，其中2≤N≤3000，1≤M≤N-1，N为整个有线电视网的结点总数，M为用户终端的数量。</p><p>第一个转播站即树的根结点编号为1，其他的转播站编号为2到N-M，用户终端编号为N-M+1到N。</p><p>接下来的N-M行每行表示—个转播站的数据，第i+1行表示第i个转播站的数据，其格式如下：</p><p>K A1 C1 A2 C2 … Ak Ck</p><p>K表示该转播站下接K个结点(转播站或用户)，每个结点对应一对整数A与C，A表示结点编号，C表示从当前转播站传输信号到结点A的费用。最后一行依次表示所有用户为观看比赛而准备支付的钱数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出文件仅一行，包含一个整数，表示上述问题所要求的最大用户数。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">2 2 2 5 3</span><br><span class="line">2 3 2 4 3</span><br><span class="line">3 4 2</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p><img src="https://cdn.luogu.com.cn/upload/pic/86.png" alt="如图"></p><p>如图所示，共有五个结点。结点①为根结点，即现场直播站，②为一个中转站，③④⑤为用户端，共M个，编号从N-M+1到N，他们为观看比赛分别准备的钱数为3、4、2，从结点①可以传送信号到结点②，费用为2，也可以传送信号到结点⑤，费用为3（第二行数据所示），从结点②可以传输信号到结点③，费用为2。也可传输信号到结点④，费用为3（第三行数据所示），如果要让所有用户（③④⑤）都能看上比赛，则信号传输的总费用为：</p><p>2+3+2+3=10，大于用户愿意支付的总费用3+4+2=9，有线电视网就亏本了，而只让③④两个用户看比赛就不亏本了。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>树上的分组背包。</p><p>设$dp_{i,j}$为以i为根的子树选择了j个客户能得到的最大盈利，就可以得到转移方程</p><p>$dp_{i,j}=max(dp_{i,j},dp_{i,j-k}+dp_{v,k}-cost)$其中k为枚举的子节点v的用户数量，即选k个用户，cost为选之后边的花费</p><p>然后倒序枚举终止状态得到ans即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3005</span>;</span><br><span class="line"><span class="keyword">int</span> val[maxn],head[maxn],edge[maxn*<span class="number">2</span>],ver[maxn*<span class="number">2</span>],Next[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,tot,dp[maxn][maxn],son[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,Next[tot]=head[u],edge[tot]=l,head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">//printf("%d %d\n",u,fa);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Next[i])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver[i];</span><br><span class="line"><span class="keyword">if</span>(v!=fa)&#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">//edge[i]-=val[v];</span></span><br><span class="line">dfs(v,u);</span><br><span class="line">son[u]+=son[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">son[u]=<span class="number">1</span>;</span><br><span class="line">dp[u][<span class="number">1</span>]=val[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> xh=head[u];xh;xh=Next[xh])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver[xh];</span><br><span class="line"><span class="comment">//if(u==1)</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;"V:"&lt;&lt;v&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(v!=fa)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=son[u];i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="comment">//if(u==1)</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;"I:"&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="comment">//if(u==1 &amp;&amp; i ==69 )cout&lt;&lt;dp[u][i]&lt;&lt;" " &lt;&lt; dp[u][j]&lt;&lt;" "&lt;&lt;dp[v][i-j]&lt;&lt;" "&lt;&lt;edge[xh]&lt;&lt;endl;</span></span><br><span class="line">dp[u][i]=max(dp[u][i],dp[u][j]+dp[v][i-j]-edge[xh]);</span><br><span class="line"><span class="comment">//if(u==1 &amp;&amp; i ==69 )cout&lt;&lt;dp[u][i]&lt;&lt;" " &lt;&lt; dp[u][j]&lt;&lt;" "&lt;&lt;dp[v][i-j]&lt;&lt;" "&lt;&lt;edge[xh]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//if(u==1)cout&lt;&lt;dp[u][i]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">dp[i][j]=<span class="number">-10000000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> k,v,l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;v,&amp;l);</span><br><span class="line">add(i,v,l);</span><br><span class="line">add(v,i,l);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=n-m+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val[i]);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="comment">//printf("%d ",dp[1][i]);</span></span><br><span class="line"><span class="keyword">if</span>(dp[<span class="number">1</span>][i]&gt;=<span class="number">0</span>)ans=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形dp </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2123 皇后游戏 题解</title>
      <link href="/2019/10/11/P2123/"/>
      <url>/2019/10/11/P2123/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P2123" target="_blank" rel="noopener">传送门</a></p><h4 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h4><p>还记得 NOIP 2012 提高组 Day1 的国王游戏吗？时光飞逝，光阴荏苒，两年过去了。国王游戏早已过时，如今已被皇后游戏取代，请你来解决类似于国王游戏的另一个问题。</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>皇后有 n 位大臣，每位大臣的左右手上面分别写上了一个正整数。恰逢国庆节来临，皇后决定为 n 位大臣颁发奖金，其中第 i 位大臣所获得的奖金数目为第i－1 位大臣所获得奖金数目与前 i 位大臣左手上的数的和的较大值再加上第 i 位大臣右手上的数。</p><p>形式化地讲：我们设第 i 位大臣左手上的正整数为 ai，右手上的正整数为 bi，则第 i 位大臣获得的奖金数目为 ci可以表达为：</p><p><img src="https://cdn.luogu.com.cn/upload/pic/1257.png" alt="img"></p><p>当然，吝啬的皇后并不希望太多的奖金被发给大臣，所以她想请你来重新安排一下队伍的顺序，使得获得奖金最多的大臣，所获奖金数目尽可能的少。<br>注意：重新安排队伍并不意味着一定要打乱顺序，我们允许不改变任何一位大臣的位置。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个正整数 T，表示测试数据的组数。<br>接下来 T 个部分，每个部分的第一行包含一个正整数 n，表示大臣的数目。<br>每个部分接下来 n 行中，每行两个正整数，分别为 ai和 bi，含义如上文所述。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 T 行，每行包含一个整数，表示获得奖金最多的大臣所获得的奖金数目。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>2<br>5<br>85 100<br>95 99<br>76 87<br>60 97<br>79 85<br>12<br>9 68<br>18 45<br>52 61<br>39 83<br>63 67<br>45 99<br>52 54<br>82 100<br>23 54<br>99 94<br>63 100<br>52 68</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>528<br>902</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>冒泡型的贪心,和国王游戏一样需要通过证明推出一个式子来验证在序列里交换任意两项$i$和$j$不比当前序列更优,但是这道题的$c_i$特殊,于是先考虑设相邻两项$i,j(i==j-1)$以进行贪心证明：</p><p>设$[1，i-1]$之间所有数的$a$值和为sum，第$i-1$个位置上的大臣奖金为$c_{i-1}$</p><p>则交换前的</p><p>$c_i=max(sum+a_i,c_{i-1})+b_i$,则</p><p>$c_j=max(sum+a_i+a_j+b_j,sum+a_i+b_i+b_j,c_{i-1}+b_i+b_j)①$</p><p>交换后的</p><p>$c_j^{‘}=max(sum+a_j,c_{i-1})+b_j$，则</p><p>$c_i^{‘}=max(sum+a_i+a_j+b_i,sum+a_j+b_i+b_j,c_{i-1}+b_i+b_j)②$</p><p>要不更优使得①&gt;②，由于非数学的贪心手段我们可以把max里的最后一个公有式子删去，则</p><p>$max(sum+a_i+a_j+b_j,sum+a_i+b_i+b_j)&lt;max(sum+a_i+a_j+b_i,sum+a_j+b_i+b_j)$</p><p>发现两边可以同时删去$sum$并分别提取共有式子即得</p><p>$max(a_j,b_i)+a_i+b_j&lt;max(a_i,b_j)+a_j+b_i$</p><p>移项后$max(a_j,b_i)-a_j-b_i&lt;max(a_i,b_j)-a_i-b_j$发现两边分别消掉了更大的那一项，可得式子</p><p>$min(a_i,b_j)&lt;min(a_j,b_i)$</p><p>然后表面上这个题结束了，不幸的是按照这个式子写cmp函数只有80分。</p><p>给上一组hack数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">3 5</span><br><span class="line">2 7</span><br><span class="line">4</span><br><span class="line">1 1</span><br><span class="line">3 5</span><br><span class="line">1 1</span><br><span class="line">2 7</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16</span><br><span class="line">16</span><br></pre></td></tr></table></figure><p>为什么会错呢？<del>我也是看了题解才知道的</del>回顾sort排序内部的实现，有一个东西叫<strong>Strict Weak Ordering</strong>，<a href="https://www.cnblogs.com/walkerlala/p/5561339.html" target="_blank" rel="noopener">介绍链接</a></p><p>参照ouuandalao的说法，可以得到实现这玩意儿的sort函数需要满足四个性质：</p><ol><li>$x\not&lt; x(非自反性)$</li><li>$x&lt;y,y\not&lt;x(非对称性)$</li><li>$x&lt;y,y&lt;z,则x&lt;z(传递性)$</li><li>$x\not&lt;y,y\not&lt;x,y\not&lt;z,z\not&lt;y,则x\not&lt;z,z\not&lt;x(不可比性的传递性)$</li></ol><p>然后我们上面那个式子可以设逻辑式进行数学证明当式子相等时不满足性质4，可以参照<a href="https://www.luogu.org/blog/ouuan/QAQ-p2123" target="_blank" rel="noopener">ouuan的题解</a></p><p>那么想办法让这玩意儿满足性质4，我们发现可以在上面式子额外增加下面任意一个比较条件：</p><p>$a_i&lt;a_j$</p><p>或</p><p>$b_i&gt;b_j$</p><p>根据ouuan的验证程序(其实是证明满足性质4的条件,但是式子详细列出来应该会特别麻烦……)得到条件正确</p><p>也是贪心的一部分，可以证明这样比较在上一个比较条件相同时对于后面的$c$更优。</p><p>于是此题结束。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line">&#125;sz[<span class="number">20005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node cp1,node cp2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(min(cp2.b,cp1.a)==min(cp2.a,cp1.b))<span class="keyword">return</span> cp1.a&lt;cp2.a;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> min(cp2.b,cp1.a)&lt;min(cp2.a,cp1.b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> xh=<span class="number">1</span>;xh&lt;=T;xh++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sz[i].a,&amp;sz[i].b);</span><br><span class="line">sort(sz+<span class="number">1</span>,sz+n+<span class="number">1</span>,cmp);</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum+=sz[i].a;</span><br><span class="line">sz[i].c=max(sum,sz[i<span class="number">-1</span>].c)+sz[i].b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sz[n].c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1363 幻想迷宫 题解</title>
      <link href="/2019/10/11/P1363/"/>
      <url>/2019/10/11/P1363/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P1363" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>（喵星人LHX和WD同心协力击退了汪星人的入侵，不幸的是，汪星人撤退之前给它们制造了一片幻象迷宫。）</p><p>WD：呜呜，肿么办啊……</p><p>LHX：momo…我们一定能走出去的！</p><p>WD：嗯，+U+U！</p><p>描述 Description</p><p>幻象迷宫可以认为是无限大的，不过它由若干个N*M的矩阵重复组成。矩阵中有的地方是道路，用’.’表示；有的地方是墙，用’#’表示。LHX和WD所在的位置用’S’表示。也就是对于迷宫中的一个点(x,y)，如果(x mod n,y mod m)是’.’或者’S’，那么这个地方是道路；如果(x mod n,y mod m)是’#’，那么这个地方是墙。LHX和WD可以向上下左右四个方向移动，当然不能移动到墙上。</p><p>请你告诉LHX和WD，它们能否走出幻象迷宫（如果它们能走到距离起点无限远处，就认为能走出去）。如果不能的话，LHX就只好启动城堡的毁灭程序了……当然不到万不得已，他不想这么做。。。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含多组数据，以EOF结尾。</p><p>每组数据的第一行是两个整数N、M。</p><p>接下来是一个N*M的字符矩阵，表示迷宫里(0,0)到(n-1,m-1)这个矩阵单元。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每组数据，输出一个字符串，Yes或者No。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">##.#</span><br><span class="line">##S#</span><br><span class="line">#..#</span><br><span class="line">#.##</span><br><span class="line">#..#</span><br><span class="line">5 4</span><br><span class="line">##.#</span><br><span class="line">##S#</span><br><span class="line">#..#</span><br><span class="line">..#.</span><br><span class="line">#.##</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>到边界减去/加上单个矩形的行列最大值即可,问题在于有可能成环。</p><p>记录变量$step_x$和$step_y$来记录往左右走和往上下跨越了多少个矩阵，只要到达过一个点且原先记录的值不同，那么说明就可以走出去。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> jz[<span class="number">1550</span>][<span class="number">1550</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1550</span>][<span class="number">1550</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> pd[<span class="number">1550</span>][<span class="number">1550</span>];</span><br><span class="line"><span class="keyword">int</span> sx,sy;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> stepx,<span class="keyword">int</span> stepy)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=n)x=<span class="number">0</span>,stepx++;</span><br><span class="line"><span class="keyword">if</span>(y&gt;=m)y=<span class="number">0</span>,stepy++;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=n<span class="number">-1</span>,stepx--;</span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">0</span>)y=m<span class="number">-1</span>,stepy--;</span><br><span class="line"><span class="keyword">if</span>(jz[x][y]==<span class="string">'#'</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//printf("%d %d\n",x+1,y+1);</span></span><br><span class="line"><span class="keyword">if</span>(pd[x][y])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[x][y][<span class="number">0</span>]!=stepx||vis[x][y][<span class="number">1</span>]!=stepy)&#123;<span class="comment">/*printf("%d %d %d %d\n",stepx,stepy,x,y);*/</span>flag=<span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pd[x][y]=<span class="literal">true</span>,vis[x][y][<span class="number">0</span>]=stepx,vis[x][y][<span class="number">1</span>]=stepy;</span><br><span class="line"><span class="comment">//printf("Yes\n");</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> lx=x+dx[i],ly=y+dy[i];</span><br><span class="line"><span class="comment">//printf("dfs:%d %d %d %d\n",dx[i],dy[i],lx+1,ly+1);</span></span><br><span class="line">dfs(lx,ly,stepx,stepy);</span><br><span class="line"><span class="keyword">if</span>(flag)<span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))==<span class="number">2</span>)&#123;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(pd,<span class="literal">false</span>,<span class="keyword">sizeof</span>(pd));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="keyword">while</span>((tmp=getchar())!=<span class="string">'.'</span>&amp;&amp;tmp!=<span class="string">'#'</span>&amp;&amp;tmp!=<span class="string">'S'</span>);</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">'S'</span>)sx=i,sy=j;</span><br><span class="line">jz[i][j]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">dfs(sx,sy,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2498 [SDOI2012]拯救小云公主</title>
      <link href="/2019/10/08/P2498/"/>
      <url>/2019/10/08/P2498/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P2498" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>英雄又即将踏上拯救公主的道路……<br>这次的拯救目标是——爱和正义的小云公主。<br>英雄来到boss的洞穴门口，他一下子就懵了，因为面前不只是一只boss，而是上千只boss。当英雄意识到自己还是等级1的时候，他明白这就是一个不可能完成的任务。<br>但他不死心，他在想，能不能避开boss去拯救公主呢，嘻嘻。<br>Boss的洞穴可以看成一个矩形，英雄在左下角（1,1），公主在右上角（row，line）。英雄为了避开boss，当然是离boss距离越远越好了，所以英雄决定找一条路径使到距离boss的最短距离最远。<br>Ps:英雄走的方向是任意的。<br>你可以帮帮他吗？<br>当英雄找到了美丽漂亮的小云公主，立刻就被boss包围了！！！英雄缓闭双眼，举手轻挥，白光一闪后使用了回城卷轴，回到了城堡，但只有小云公主回去了……因为英雄忘了进入回城的法阵了。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行，输入三个整数，n表示boss的数目，row，line表示矩形的大小；</p><p>接下来n行，每行分别两个整数表示boss的位置坐标。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>1 3 3<br>3 1</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>2.00</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>20%数据，boss坐标范围小于等于50；</p><p>60%数据，n&lt;=1500；</p><p>100%数据，n&lt;=3000；</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>题目要求”最小的距离最远”所以肯定是二分答案。考虑二分一个最远距离mid，在图上画一画可以知道，当两个boss间的距离小于二倍的mid的时候，是不能从两个boss之间经过的，那么可以考虑建图，只要距离小于这个mid的boss就连一条边，我们发现，如果一个boss同时封死上下/左右/上右/下左边界的情况时，mid不合法，那么就可以考虑并查集，把这道题转换成noip2017的奶酪来做。同理也可以进行bfs求出最后答案。</p><p>并查集的代码由于每次连边是$O(n^2)$的，所以在luogu上需要开O2才能过，而bfs这个复杂度跑不满，所以bfs速度会快得多,总的复杂度为$O(log{min(row,line)}*n^{2})$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,row,line;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">boss</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;sz[<span class="number">3050</span>];</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">3050</span>];</span><br><span class="line"><span class="keyword">int</span> xl1[<span class="number">3050</span>],xl2[<span class="number">3050</span>];</span><br><span class="line"><span class="keyword">double</span> l,r;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-4</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> id1,<span class="keyword">int</span> id2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (sz[id1].x-sz[id2].x)*(sz[id1].x-sz[id2].x)+(sz[id1].y-sz[id2].y)*(sz[id1].y-sz[id2].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x==fa[x])?x:fa[x]=get(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++) fa[i]=i;</span><br><span class="line"><span class="comment">//printf("yes\n");</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(calc(i,j)&lt;m*m*<span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp1=get(i),tmp2=get(j);</span><br><span class="line"><span class="keyword">if</span>(tmp1!=tmp2)fa[tmp1]=tmp2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">double</span>)sz[i].x<span class="number">-1</span>&lt;m||((<span class="keyword">double</span>)(line-sz[i].y))&lt;m)&#123;</span><br><span class="line"><span class="keyword">int</span> u=get(i),v=get(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(u!=v)fa[u]=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">double</span>)sz[i].y<span class="number">-1</span>&lt;m||((<span class="keyword">double</span>)(row-sz[i].x))&lt;m)&#123;</span><br><span class="line"><span class="keyword">int</span> u=get(i),v=get(n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(u!=v)fa[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> get(<span class="number">0</span>)!=get(n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;row,&amp;line);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sz[i].x,&amp;sz[i].y);</span><br><span class="line">l=<span class="number">0</span>,r=min(row,line);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fabs</span>(l-r)&gt;eps)&#123;</span><br><span class="line"><span class="keyword">double</span> mid=(l+r)/<span class="number">2.00</span>;</span><br><span class="line"><span class="comment">//printf("%lf\n",mid);</span></span><br><span class="line"><span class="keyword">if</span>(check(mid))l=mid,ans=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> n,row,line;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">boss</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;sz[<span class="number">3050</span>];</span><br><span class="line"><span class="keyword">int</span> xl1[<span class="number">3050</span>],xl2[<span class="number">3050</span>];</span><br><span class="line"><span class="keyword">double</span> edge[<span class="number">3050</span>][<span class="number">3050</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">3050</span>];</span><br><span class="line"><span class="keyword">double</span> l,r;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-4</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> id1,<span class="keyword">int</span> id2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (sz[id1].x-sz[id2].x)*(sz[id1].x-sz[id2].x)+(sz[id1].y-sz[id2].y)*(sz[id1].y-sz[id2].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>((<span class="keyword">double</span>)sz[i].x<span class="number">-1</span>&lt;m||((<span class="keyword">double</span>)(line-sz[i].y))&lt;m)q.push(i),vis[i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">double</span>)sz[u].y<span class="number">-1</span>&lt;m||((<span class="keyword">double</span>)(row-sz[u].x))&lt;m)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(edge[u][i]&lt;m*m*<span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">double</span>)sz[i].y<span class="number">-1</span>&lt;m||((<span class="keyword">double</span>)(row-sz[i].x))&lt;m)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">q.push(i),vis[i]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;row,&amp;line);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sz[i].x,&amp;sz[i].y);</span><br><span class="line">l=<span class="number">0</span>,r=min(row,line);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)edge[i][j]=calc(i,j);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fabs</span>(l-r)&gt;eps)&#123;</span><br><span class="line"><span class="keyword">double</span> mid=(l+r)/<span class="number">2.00</span>;</span><br><span class="line"><span class="comment">//printf("%lf\n",mid);</span></span><br><span class="line"><span class="keyword">if</span>(check(mid))l=mid,ans=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5017 摆渡车(noip2018pjT3) 题解</title>
      <link href="/2019/10/08/P5017/"/>
      <url>/2019/10/08/P5017/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P5017" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>有$n$名同学要乘坐摆渡车从人大附中前往人民大学，第$i$位同学在第$t_i$ 分钟去 等车。只有一辆摆渡车在工作，但摆渡车容量可以视为无限大。摆渡车从人大附中出发、 把车上的同学送到人民大学、再回到人大附中（去接其他同学），这样往返一趟总共花费$m$分钟（同学上下车时间忽略不计）。摆渡车要将所有同学都送到人民大学。</p><p>凯凯很好奇，如果他能任意安排摆渡车出发的时间，那么这些同学的等车时间之和最小为多少呢？</p><p>注意：摆渡车回到人大附中后可以即刻出发。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个正整数 <em>n</em>,<em>m</em>，以一个空格分开，分别代表等车人数和摆渡车往返 一趟的时间。<br>第二行包含 <em>n</em> 个正整数，相邻两数之间以一个空格分隔，第 <em>i</em> 个非负整数$t_i$代 表第 <em>i</em> 个同学到达车站的时刻。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，一个整数，表示所有同学等车时间之和的最小值（单位：分钟）。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>5 5<br>11 13 1 5 5</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>4</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>把时间从小到大排序然后考虑比较暴力的想法,设$dp_{i,j}$为前面i个人在第$j$分钟全部被接走的最长等待时间,但是由于$t_i$很大所以考虑转化第二维为第i个人等待了$j$分钟时前i个人都被接走的最长等待时间。</p><p>用刷表法，枚举一个大于当前编号的k和一个不大于$min(m-1,t_{i+1}-t_{i})$的等待时间$j$，设第i+1个人到第k个人的总等待时间为$sumt$,可以得到转移方程：</p><p>$dp_{k,max(t_i+j+m-t[k],0)}=min(dp_{k,max(t_i+j+m-t[k],0)},dp_{i,j}+sumt)$</p><p>然后来求这个$sumt=\sum\limits_{x=i+1}^n(max(t_i+j+m-t[k],0)+t_k-t_x)$</p><p>式子展开后可得$sumt=(max(t_i+j+m-t[k],0)+t_k)*(k-i)-(sum_k-sum_i)$，带回原式就得到了整道题的转移方程:</p><p>$dp_{k,max(t_i+j+m-t[k],0)}=min(dp_{k,max(t_i+j+m-t[k],0)},dp_{i,j}+(max(t_i+j+m-t[k],0)+t_k)*(k-i)-(sum_k-sum_i))$</p><p>好像用斜率优化可解？如果有空的话回头复习斜率优化的时候会(gu)补(gu)上(gu).</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,sum[maxn],t[maxn],dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i]),sum[i]=sum[i<span class="number">-1</span>]+t[i];</span><br><span class="line">sort(t+<span class="number">1</span>,t+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)dp[i][j]=<span class="number">192608171</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">t[<span class="number">0</span>]=<span class="number">-89279123</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> maxt=min(m<span class="number">-1</span>,t[i+<span class="number">1</span>]-t[i]);<span class="comment">//到下一个人的最长等待时间 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=maxt;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">dp[k][max(t[i]+j+m-t[k],<span class="number">0</span>)]=min(dp[k][max(t[i]+j+m-t[k],<span class="number">0</span>)],dp[i][j]+(max(t[i]+j+m-t[k],<span class="number">0</span>)+t[k])*(k-i)-(sum[k]-sum[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=INT_MAX;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m<span class="number">-1</span>;i++)ans=min(ans,dp[n][i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群岛沉没</title>
      <link href="/2019/10/07/%E7%BE%A4%E5%B2%9B%E6%B2%89%E6%B2%A1/"/>
      <url>/2019/10/07/%E7%BE%A4%E5%B2%9B%E6%B2%89%E6%B2%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>遥远的海中，有着风景秀美的Eolv群岛，岛上的居民们一直以来都在幸福快乐地生活着。可是，地壳运动打破了他们平静的生活——近期，火山觉醒，地震频发。最令居民们绝望的是，他们祖祖辈辈耕耘过的小岛，如今正在沉没。</p><p>不能坐以待毙！居民们成立了紧急行动队，测算出了群岛中各个小岛将会沉没的时间。接下来，他们要在小岛之间架设一些桥梁，以满足在特殊时期物资的运输需求。</p><p>已经知道，群岛中一共包括N座小岛。居民们以将会沉没的时间为序，从先到后将它们从1到N编号。由于距离和地形的限制，他们只可能在M对小岛间建立桥梁，建立每条桥梁所需代价也不尽相同。一座桥梁连接两个不同的小岛，而其中只要有一座沉没，这条桥梁就将不再被允许通行。</p><p>现在，你需要设计一份桥梁的建设方案，保证居民们时时刻刻都可以通过桥梁在任意两个仍未沉没的岛屿间通行，而使建造代价尽可能地小。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个正整数 N、M，分别表示群岛中小岛数量、可能建立的桥梁数量。</p><p>接下来M行，其中第i行包含3个整数Ai、Bi、Di，表示第i座桥梁连接着编号为Ai和Bi的两个小岛，建造它所需的代价为Di。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>若存在一种建造方案使得对于所有的时刻，居民们可在任意两个仍未沉没的小岛间通行，请输出1个整数，表示建造代价的最小值。</p><p>否则请输出「Salty!」，表示满足要求的建造方案不存在。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>5 6<br>1 2 1<br>1 3 2<br>2 3 7<br>2 5 7<br>3 4 2<br>4 5 1</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>11</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先判断不能联通的情况，就是任意一个岛屿都不能建造与他相连的更大的编号的岛屿相连的桥梁，否则一定能连通，遍历每个点并判断与其相连的每一条边，取最小值即可，复杂度$O(m)$，注意编号为n的点特殊处理。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">priority_queue&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200000</span>,maxm=<span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> head[maxn],n,m,ver[maxm&lt;&lt;<span class="number">1</span>],Nxt[maxm&lt;&lt;<span class="number">1</span>],edge[maxm&lt;&lt;<span class="number">1</span>],deg[maxn],tot;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,edge[tot]=l,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0x7ffffff</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(ver[i]&lt;u)<span class="keyword">continue</span>;</span><br><span class="line">sum=min(sum,edge[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("sinkingislands.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("sinkingislands.out","w",stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;l);</span><br><span class="line">add(u,v,l);</span><br><span class="line"><span class="keyword">if</span>(u&gt;v)deg[v]+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> deg[u]+=<span class="number">1</span>;</span><br><span class="line">add(v,u,l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(deg[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Salty!"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)ans+=solve(i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 杂题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2107 小Z的AK计划 题解</title>
      <link href="/2019/10/07/P2107/"/>
      <url>/2019/10/07/P2107/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P2107" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>在小Z的家乡，有机房一条街，街上有很多机房。每个机房里都有一万个人在切题。小Z刚刷完CodeChef，准备出来逛逛。</p><p>机房一条街有 n 个机房，第 i 个机房的坐标为 xi ，小Z的家坐标为 0。小Z在街上移动的速度为1，即从 x1 到 x2 所耗费的时间为 |x1 − x2|。 每个机房的学生数量不同，ACM 题目水平也良莠不齐。小Z到达第 i 个机房后，可以花 ti 的时间想题，然后瞬间 AK；当然，也可以过机房而不入。</p><p>小Z现在只有 m 个单位时间，之后他就该赶着去打 Codeforces 了。现在他想知道自己最多能在多少个机房 AK，希望你帮帮他。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n，m。</p><p>接下来 n 行，每行包含两个整数 xi，ti 。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>第一行包含一个整数，表示小Z最多能 AK 的机房数量。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>2 10<br>1 100<br>5 5</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>1 </p><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>对于 30% 的数据，n ≤ 20。<br>对于 60% 的数据，n ≤ 1000。<br>对于 100% 的数据，1 ≤ n ≤ 10^5，0 ≤ m，xi ≤ 10^18，0 ≤ ti ≤ 10^9。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>反悔型的贪心。首先按照机房距离的从近至远排序，用一个大根堆记录当前已选的机房，然后用一个$sum_t$记录当前的总时间花销，对于一个机房，如果当前剩余时间能到达此机房并做完题，就将其加入堆中，若不能，则对选择此机房并抛弃大根堆中最大机房的时间谁更优，若更优则删去堆顶并加入当前元素，否则反之。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll m,sumt,now;</span><br><span class="line">priority_queue&lt; pair&lt;ll,ll&gt; &gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cpr</span>&#123;</span></span><br><span class="line">ll x;</span><br><span class="line">ll t;</span><br><span class="line">&#125;sz[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(cpr cp1,cpr cp2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cp1.x&lt;cp2.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;sz[i].x,&amp;sz[i].t);</span><br><span class="line">sort(sz+<span class="number">1</span>,sz+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(m-sumt-(sz[i].x-now)&gt;=sz[i].t)&#123;<span class="comment">//直接加进来 </span></span><br><span class="line">sumt+=(sz[i].x-now);</span><br><span class="line">sumt+=sz[i].t,now=sz[i].x;</span><br><span class="line">q.push(make_pair(sz[i].t,i));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!q.empty()&amp;&amp;(sumt-q.top().first+(sz[i].x-now)+sz[i].t&lt;sumt))&#123;</span><br><span class="line">sumt-=q.top().first;</span><br><span class="line">sumt+=sz[i].t,sumt+=(sz[i].x-now),now=sz[i].x;</span><br><span class="line">q.push(make_pair(sz[i].t,i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,q.size());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tyvj1617 Grape 题解</title>
      <link href="/2019/10/03/tyvj1617/"/>
      <url>/2019/10/03/tyvj1617/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://www.joyoi.cn/problem/tyvj-1617" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>fox来到了一排葡萄架下,葡萄架上有很多葡萄(n串),它想将一部分葡萄偷走.<br>    每串葡萄都有一个价值,当然,由于有酸有甜,葡萄的价值可能为正,也可能为负.<br>    当然,为了让农夫看不出来,fox规定,每k串葡萄中,它最多选b串,但是由于fox是比较贪心的,每连续k串葡萄中,它会最少选a串<br>    例如n=5 k=3 a=1 b=2时,在第1—第3串葡萄中,fox只能选1或2串,在第2—第4串葡萄中,fox也只能选1或2串.<br>    图1的选法是不合法的,因为2—4中选出了3串葡萄<br>    图2的选法也是不合法的,因为1—3中选出了0串葡萄<br>    而图3的选法是合法的.<br>    现在,fox要选出一些葡萄,而农夫得到剩余的葡萄,由于fox有嫉妒心理,希望让fox得到的价值减去农夫得到的价值的差值最大</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p> 第一行整数n,k,a,b<br> 第二行n个整数表示每串葡萄的价值</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>仅一行,表示答案</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>2 1 0 1<br>2 -2</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>4</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>n很大但是k很小，而k的状态很明显需要压缩表示</p><p>于是设$F_{i,k}$为前i串葡萄的最后k串葡萄状态为k时的最大美味值，转移方程时很明显每次把k左移一位并且通过与运算处理掉超出位数的1.</p><p>转移方程可得：</p><p>$F_{i+1,S&lt;&lt;1|1}=min(F_{i+1,S&lt;&lt;1|1},F_{i,S}+c_{i+1}),F_{i+1,S&lt;&lt;1}=min(F_{i+1,S&lt;&lt;1},F_{i,S} )$</p><p>由于有$a$和$b$的限制，所以需要预处理出一个状态是否合法</p><p>需要注意的时初始状态为$F_{0,i}(i&lt;=maxstate)=0$ 其中maxstate==$2^k-1$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,k,a,b,w[<span class="number">10005</span>],maxstate;</span><br><span class="line">ll sum,ans,dp[<span class="number">10005</span>][<span class="number">1</span>&lt;&lt;<span class="number">11</span>];</span><br><span class="line"><span class="keyword">bool</span> ok[<span class="number">1</span>&lt;&lt;<span class="number">12</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isok</span><span class="params">(<span class="keyword">int</span> S)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(S&amp;(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)))tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tot&gt;=a&amp;&amp;tot&lt;=b)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("grape.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("grape.out","w",stdout);</span></span><br><span class="line"><span class="built_in">memset</span>(ok,<span class="literal">false</span>,<span class="keyword">sizeof</span>(ok));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;k,&amp;a,&amp;b);</span><br><span class="line">maxstate=(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w[i]),sum+=w[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxstate;i++)&#123;</span><br><span class="line">ok[i]=isok(i);</span><br><span class="line"><span class="comment">//if(ok[i])printf("Yes: %d\n",i);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=maxstate;j++)dp[i][j]=<span class="number">-0x7ffffff</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxstate;i++)dp[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=maxstate;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> S=(j&lt;&lt;<span class="number">1</span>)&amp;maxstate;</span><br><span class="line"><span class="keyword">if</span>(dp[i][j]!=<span class="number">-0x7ffffff</span>)&#123;</span><br><span class="line"><span class="comment">//printf("%d %d\n",i,j);</span></span><br><span class="line"><span class="comment">//printf("%d %d\n",dp[i][j]);</span></span><br><span class="line"><span class="keyword">if</span>(ok[S|<span class="number">1</span>]||i+<span class="number">1</span>&lt;k)dp[i+<span class="number">1</span>][S|<span class="number">1</span>]=max(dp[i+<span class="number">1</span>][S|<span class="number">1</span>],dp[i][j]+w[i+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(ok[S]||i+<span class="number">1</span>&lt;k)dp[i+<span class="number">1</span>][S]=max(dp[i+<span class="number">1</span>][S],dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">-0x7ffffff</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxstate;i++)ans=max(ans,dp[n][i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans*<span class="number">2</span>-sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟赛 水晶的排列 题解</title>
      <link href="/2019/09/28/9-21-T3/"/>
      <url>/2019/09/28/9-21-T3/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定 n 个水晶，第 i 个水晶的高度为 H i 。<br>现在要求将这些水晶排成一排，要求相邻两个水晶之间的高度差均大于 k，问有多少种排法。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数 n,k。<br>接下来 n 行，每行一个整数，第 i 行的整数表示 $H_i$。</p><a id="more"></a><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行一个整数表示排法的种类数。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>4 1<br>3<br>4<br>2<br>1</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>2</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>考虑进行状态压缩动态规划，设 F s,i 表示由集合 s 内的点排成一列，最后一个<br>是第 i 个水晶，合法的方案数。<br>那么我们显然只需枚举倒数第二个水晶 j，并保证两个水晶之间的高度差大于<br>k 就行了，余下的将转化为子问题。<br>转移方程为: $F_{s,i}=\sum_{j \in s,j\not= i}F_{s-{i},j}[|H_i-H_j|&gt;k]$<br>时间复杂度$O(n^22^n)$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,k,maxstate,dp[(<span class="number">1</span>&lt;&lt;<span class="number">18</span>)<span class="number">-1</span>][<span class="number">20</span>],h[<span class="number">20</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("3.in","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;h[i]);</span><br><span class="line">maxstate=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dp[<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> s=<span class="number">1</span>;s&lt;=maxstate;s++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(h[i]-h[j])&gt;k&amp;&amp;(!((s&gt;&gt;(j<span class="number">-1</span>))&amp;<span class="number">1</span>)))dp[s|(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j]+=dp[s][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans+=dp[maxstate][i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9_22_T3 模拟赛 遗迹净化 题解</title>
      <link href="/2019/09/26/9-22-T3/"/>
      <url>/2019/09/26/9-22-T3/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>不知几千年后，本应死去的遗迹，如今却迎来了客人。</p><p>拔起了圣剑的你，为追溯过往，从这里开始了冒险的旅程。进入遗迹后，利用探知术，你得知了遗迹中包括入口处在内共有N个探索点，它们由M条双向通道相连通，通道的长度不尽相同。由于遗迹已在地下尘封多年，通道里都充满着污秽。你需要先净化掉所有的污秽，才能迈出探索的脚步。</p><p>从遗迹入口开始，将N个探索点从1到N编号。首先，你可以使用神圣驱魔术，净化以你为中心的一定区域内的所有道路。即，消耗数值为C×X的魔力点（C为常数），选定一个非负整数距离X。对于一条通道，若其两端的探索点与1号探索点间的距离均不大于X，则这条通道将被净化。这里，两探索点i与j间的距离定义为从i到j需经通道的长度之和的最小值。之后，你需要分别净化其余的所有通道，净化一条通道所需消耗魔力点即为这条通道的长度。</p><p>请确定净化的方式，使你需要消耗魔力点的数值最小。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个正整数 N、M、C，分别表示遗迹中探索点数量、通道数量和与使用神圣净化术时消耗魔力点数值有关的常数。</p><p>接下来M行，其中第i行包含3个整数Ai、Bi、Di，表示第i条通道连接着编号为Ai和Bi的两个探索点，长度为Di。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>请输出1个整数，表示你需要消耗魔力点的最小值。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>5 5 2<br>2 3 1<br>3 1 2<br>2 4 3<br>1 2 4<br>2 5 5</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>14</p><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于32%的数据，N&lt;=100，M &lt;= 200，C &lt;= 100；Di &lt;= 10．<br>对于64%的数据，N&lt;=100，M&lt;=4000<br>对于100%的数据，2 &lt;= N &lt;= 100000，1 &lt;= M &lt;= 200000，1 &lt;= C &lt;= 100000；<br>1 &lt;= Ai、Bi &lt;= N，Ai ≠ Bi，1 &lt;= Di &lt;= 100000两个探索点间直接连接的通道不超过一条。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>简化题意：让你找一个距离，到一条边的距离（定义为两个点当中距离更大的那个点的最短距离）比该距离短的边可以用一个费用一次性全部净化，其他的边全部要手动净化</p><p>首先需要跑一遍最短路，处理出1号点到每个点的最短路，然后遍历所有的边，每条边两个点取最大值，然后按这个最大值给所有边排序，同时预处理出一个前缀和$sum_c$为需要净化的费用总和，然后在数组中寻找最小值断点更新答案即可.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>,maxm=<span class="number">200005</span>;</span><br><span class="line">ll ans,sumc,n,m,c,tot,head[maxn],ver[maxm&lt;&lt;<span class="number">1</span>],edge[maxm&lt;&lt;<span class="number">1</span>],Nxt[maxm&lt;&lt;<span class="number">1</span>],dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">priority_queue&lt; pair&lt;ll,ll&gt; &gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ll cost;</span><br><span class="line">ll dist;</span><br><span class="line">&#125;xl[maxm];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ed</span>&#123;</span></span><br><span class="line">ll u;</span><br><span class="line">ll v;</span><br><span class="line">ll l;</span><br><span class="line">&#125;E[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll u,ll v,ll l)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,edge[tot]=l,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node cp1,node cp2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cp1.dist&lt;cp2.dist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=<span class="number">0x7ffffff</span>;</span><br><span class="line">q.push(make_pair(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="comment">//printf("Yes\n");</span></span><br><span class="line"><span class="keyword">int</span> u=q.top().second;q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">//printf("%lld\n",u);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> ll i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="comment">//printf("%lld\n",ver[i]);</span></span><br><span class="line"><span class="keyword">if</span>(dis[ver[i]]&gt;dis[u]+edge[i])</span><br><span class="line">dis[ver[i]]=dis[u]+edge[i],q.push(make_pair(-dis[ver[i]],ver[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("vestige.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("vestige.out","w",stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;m,&amp;c);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">ll u,v,l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;u,&amp;v,&amp;l);</span><br><span class="line"><span class="comment">//printf("%lld %lld %lld\n",u,v,l);</span></span><br><span class="line">E[i].u=u,E[i].v=v,E[i].l=l;sumc+=l;</span><br><span class="line">add(u,v,l);add(v,u,l);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra();</span><br><span class="line"><span class="comment">//for(register int i=1;i&lt;=n;i++)printf("%lld\n",dis[i]);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)xl[i].cost=E[i].l,xl[i].dist=max(dis[E[i].u],dis[E[i].v]);</span><br><span class="line">sort(xl+<span class="number">1</span>,xl+m+<span class="number">1</span>,cmp);</span><br><span class="line">ans=sumc;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">sumc-=xl[i].cost,ans=min(ans,<span class="number">1L</span>L*c*xl[i].dist+sumc); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,xl[i].dist,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> dijkstra </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9_22_T2 模拟赛 排干净月潭水塘 题解</title>
      <link href="/2019/09/22/9-22-T2/"/>
      <url>/2019/09/22/9-22-T2/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>净月潭公园里有n个水塘，因为要做OIER们的宿营地，需要把这n个水塘中的水排干，水塘中的水在自然条件下1个单位的时间可以蒸发A升水。现在买了1台抽水机，使用抽水机可以让你用1个单位的时间使每个水塘除开自然蒸发的A升水外，还可抽B升水，但在1个单位的时间内只能对1个水塘使用。</p><p>要你求出排干所有水塘的最少时间（水塘中的水为0时为排干）。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行N，A，B；</p><p>接下来N行，a1,a2,…aN每行一个数，表示每个水塘中水的升数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一行一个整数，表示排干所有水塘的最少时间。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>3 2 1<br>1<br>2<br>3</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>1</p><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于10%数据：N ≤ 5，1&lt;=ai,A,B&lt;=10<br>对于40%数据：N ≤ 5000，1&lt;=ai,A,B&lt;=5000<br>对于100%数据：N ≤ 500000，1&lt;=ai,A,B&lt;=500000</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>看数据范围应该能想到二分，二分一个总时间$mid$，然后只要一个水池超过该时间就全力去抽，最后判断时间是否合法。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500005</span>;</span><br><span class="line"><span class="keyword">int</span> ans,mid,l,r,n,A,B;</span><br><span class="line"><span class="keyword">int</span> sz[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;<span class="comment">//×ÜÊ±¼ä </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(x*A&lt;sz[i])res+=(sz[i]-x*A+B<span class="number">-1</span>)/B;</span><br><span class="line"><span class="keyword">if</span>(res&lt;=x)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("dry.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("dry.out","w",stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;A,&amp;B);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sz[i]),r=max(r,sz[i]/A);</span><br><span class="line">l=<span class="number">1</span>,r+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))&#123;</span><br><span class="line">r=mid<span class="number">-1</span>;</span><br><span class="line">ans=mid;</span><br><span class="line">&#125;<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>qu</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.22模拟赛 二十四点 题解</title>
      <link href="/2019/09/22/9-22-T1/"/>
      <url>/2019/09/22/9-22-T1/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定n个数，不能改变顺序，可以再中间添加加号、减号或乘号，求有多少种算式可以算出24。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行一个正整数n。<br>接下来n行每行一个整数，第i行表示第i个数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一行一个整数，输出满足条件的算式个数。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>5<br>10<br>2<br>4<br>2<br>4</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>5</p><h4 id="数据规模"><a href="#数据规模" class="headerlink" title="数据规模"></a>数据规模</h4><p>对于10%的数据，n=2<br>对于40%的数据，n&lt;=5<br>对于100%的数据，n&lt;=10</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>很明显是一个深搜，不用剪枝就能过，但是要注意不能从pos=0开始乘和减。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,sz[<span class="number">15</span>],fac[<span class="number">15</span>],sum[<span class="number">15</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("%d %d\n",pos,now);</span></span><br><span class="line"><span class="comment">//if(now&gt;24&amp;&amp;sum[n]-sum[pos]&lt;now-24)return;</span></span><br><span class="line"><span class="comment">//if(now&lt;24&amp;&amp;sum[n]-sum[pos]&lt;24-now)return;</span></span><br><span class="line"><span class="comment">//printf("Yes\n");</span></span><br><span class="line"><span class="keyword">if</span>(pos==n)&#123;</span><br><span class="line"><span class="keyword">if</span>(now==<span class="number">24</span>)&#123;</span><br><span class="line"><span class="comment">//printf("Yes\n");</span></span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=sz[pos+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=pos+<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">res*=sz[i];</span><br><span class="line">dfs(i,now+res);</span><br><span class="line"><span class="keyword">if</span>(pos!=<span class="number">0</span>)dfs(i,now-res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pos!=<span class="number">0</span>)dfs(pos+<span class="number">1</span>,now-sz[pos+<span class="number">1</span>]);</span><br><span class="line">dfs(pos+<span class="number">1</span>,now+sz[pos+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"z24a.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"z24a.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sz[i]),sum[i]=sum[i<span class="number">-1</span>]+sz[i];</span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj3268 奶牛农场 题解</title>
      <link href="/2019/09/22/poj3268/"/>
      <url>/2019/09/22/poj3268/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://poj.org/problem?id=3268" target="_blank" rel="noopener">传送门</a></p><h4 id="Description-题目描述"><a href="#Description-题目描述" class="headerlink" title="Description 题目描述"></a>Description 题目描述</h4><p>One cow from each of <em>N</em> farms (1 ≤ <em>N</em> ≤ 1000) conveniently numbered 1..<em>N</em> is going to attend the big cow party to be held at farm #<em>X</em> (1 ≤ <em>X</em> ≤ <em>N</em>). A total of <em>M</em> (1 ≤ <em>M</em> ≤ 100,000) unidirectional (one-way roads connects pairs of farms; road <em>i</em> requires <em>Ti</em> (1 ≤ <em>Ti</em> ≤ 100) units of time to traverse.</p><p>Each cow must walk to the party and, when the party is over, return to her farm. Each cow is lazy and thus picks an optimal route with the shortest time. A cow’s return route might be different from her original route to the party since roads are one-way.</p><p>Of all the cows, what is the longest amount of time a cow must spend walking to the party and back?</p><a id="more"></a><h5 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h5><p>题意简述：有N个农场，编号为1到N，用M条单向道路连接，其中通过第i条道路所需的时间是Ti。</p><p>现在所有农场中的牛都要走到X号农场(1&lt;=X&lt;=N)开派对，并在派对后返回自己的农场。当然，去的路和回来的路可能不同，因为路是单向的。</p><p>每头牛都很懒，他们会选择消耗时间总和最短的路径来走。求所有牛在路上花费的时间的最大值。</p><h4 id="Input-输入"><a href="#Input-输入" class="headerlink" title="Input 输入"></a>Input 输入</h4><p>Line 1: Three space-separated integers, respectively: <em>N</em>, <em>M</em>, and <em>X</em><br>Lines 2..<em>M</em>+1: Line <em>i</em>+1 describes road <em>i</em> with three space-separated integers: <em>Ai</em>, <em>Bi</em>, and <em>Ti</em>. The described road runs from farm <em>Ai</em> to farm <em>Bi</em>, requiring <em>Ti</em> time units to traverse.</p><h4 id="Output-输出"><a href="#Output-输出" class="headerlink" title="Output 输出"></a>Output 输出</h4><p>Line 1: One integer: the maximum of time any one cow must walk.</p><h4 id="Sample-Input-样例输入"><a href="#Sample-Input-样例输入" class="headerlink" title="Sample Input 样例输入"></a>Sample Input 样例输入</h4><p>4 8 2<br>1 2 4<br>1 3 2<br>1 4 7<br>2 1 1<br>2 3 5<br>3 1 2<br>3 4 4<br>4 2 3</p><h4 id="Sample-Output-样例输出"><a href="#Sample-Output-样例输出" class="headerlink" title="Sample Output 样例输出"></a>Sample Output 样例输出</h4><p>10</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>由于道路不是双向的，所以去和回的最短路是不同的。</p><p>回去的最短路明显是从排队地点处理一遍dis，那么来的路处理一次，然后变为反图再跑一次就好了。</p><p>然后遍历更新答案即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>,maxm=<span class="number">10005</span>;</span><br><span class="line">priority_queue&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">int</span> ans,dis[maxn],n,m,x,head[maxn],ver[maxm&lt;&lt;<span class="number">1</span>],edge[maxm&lt;&lt;<span class="number">1</span>],Nxt[maxm&lt;&lt;<span class="number">1</span>],tot;</span><br><span class="line"><span class="keyword">int</span> dis_2[maxn],head_2[maxn],ver_2[maxm&lt;&lt;<span class="number">1</span>],edge_2[maxm&lt;&lt;<span class="number">1</span>],Nxt_2[maxm&lt;&lt;<span class="number">1</span>],tot_2;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn],vis_2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,Nxt[tot]=head[u],edge[tot]=l,head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">ver_2[++tot_2]=v,Nxt_2[tot_2]=head_2[u],edge_2[tot_2]=l,head_2[u]=tot_2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=<span class="number">192608171</span>;</span><br><span class="line">dis[x]=<span class="number">0</span>;</span><br><span class="line">q.push(make_pair(<span class="number">0</span>,x));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.top().second;q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver[i];</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+edge[i])&#123;dis[v]=dis[u]+edge[i];q.push(make_pair(-dis[v],v));&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra_2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis_2[i]=<span class="number">192608171</span>;</span><br><span class="line">dis_2[x]=<span class="number">0</span>;</span><br><span class="line">q.push(make_pair(<span class="number">0</span>,x));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.top().second;q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis_2[u])<span class="keyword">continue</span>;</span><br><span class="line">vis_2[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head_2[u];i;i=Nxt_2[i])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver_2[i];</span><br><span class="line"><span class="keyword">if</span>(dis_2[v]&gt;dis_2[u]+edge_2[i])&#123;dis_2[v]=dis_2[u]+edge_2[i];q.push(make_pair(-dis_2[v],v));&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("party.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("party.out","w",stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;l);</span><br><span class="line">add(u,v,l);add_2(v,u,l);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra();</span><br><span class="line">dijkstra_2();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans=max(ans,dis[i]+dis_2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4821 [中山市选]生成树 题解</title>
      <link href="/2019/09/22/P4821/"/>
      <url>/2019/09/22/P4821/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P4821" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>有一种图形叫做五角形圈。一个五角形圈的中心有1个由n个顶点和n条边组成的圈。在中心的这个n边圈的每一条边同时也是某一个五角形的一条边，一共有n个不同的五角形。这些五角形只在五角形圈的中心的圈上有公共的顶点。如图0所示是一个4-五角形圈。</p><p><img src="https://miao.su/images/2019/09/22/clip_image001a31b1.png" alt="如图所示"></p><p>现在给定一个n五角形圈，你的任务就是求出n五角形圈的不同生成树的数目。还记得什么是图的生成树吗？一个图的生成树是保留原图的所有顶点以及顶点的数目减去一这么多条边,从而生成的一棵树。</p><p>由于这样的生成树数目可能过多，你只需要输出答案对2007的模数即可。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含多组测试数据。第一行包含一个正整数T，表示测试数据数目。每组测试数据包含一个整数n( 2&lt;=N&lt;=100)，代表你需要求解的五角形圈中心的边数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对每一组测试数据，输出一行包含一个整数x，表示n五角形圈的生成树数目模2007之后的结果。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>1<br>2</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>40</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>很明显需要断$n-1$条边，然后打表看看$n=2$和$n=3$的情况，会发现需要断正多边形上的边然后其中一个五边形要再再删去一条边，且这条边必须要在中心圈上，于是根据乘法原理即为$4<em>n</em>5^{n-1}$。快速幂即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">2007</span>;</span><br><span class="line">ll n,ans,T;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">power</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1L</span>L;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(res*=a%mod)%=mod;(a*=a%mod)%=mod;b&gt;&gt;=(<span class="number">1L</span>L);&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> xh=<span class="number">1</span>;xh&lt;=T;xh++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">4L</span>L*n%mod*power(<span class="number">5</span>,n<span class="number">-1</span>)%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂题 </tag>
            
            <tag> 结论题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codevs2370 小机房的树 题解</title>
      <link href="/2019/09/20/codevs2370/"/>
      <url>/2019/09/20/codevs2370/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codevs.cn/problem/2370/" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述-Description"><a href="#题目描述-Description" class="headerlink" title="题目描述 Description"></a><strong>题目描述</strong> Description</h4><p>小机房有棵焕狗种的树，树上有N个节点，节点标号为0到N-1，有两只虫子名叫飘狗和大吉狗，分居在两个不同的节点上。有一天，他们想爬到一个节点上去搞基，但是作为两只虫子，他们不想花费太多精力。已知从某个节点爬到其父亲节点要花费 c 的能量（从父亲节点爬到此节点也相同），他们想找出一条花费精力最短的路，以使得搞基的时候精力旺盛，他们找到你要你设计一个程序来找到这条路，要求你告诉他们最少需要花费多少精力</p><a id="more"></a><h4 id="输入描述-Input-Description"><a href="#输入描述-Input-Description" class="headerlink" title="输入描述 Input Description"></a><strong>输入描述</strong> Input Description</h4><p>第一行一个n，接下来n-1行每一行有三个整数u，v, c 。表示节点 u 爬到节点 v 需要花费 c 的精力。第n+1行有一个整数m表示有m次询问。接下来m行每一行有两个整数 u ，v 表示两只虫子所在的节点</p><h4 id="输出描述-Output-Description"><a href="#输出描述-Output-Description" class="headerlink" title="输出描述 Output Description"></a><strong>输出描述</strong> Output Description</h4><p>一共有m行，每一行一个整数，表示对于该次询问所得出的最短距离。</p><h4 id="样例输入-Sample-Input"><a href="#样例输入-Sample-Input" class="headerlink" title="样例输入 Sample Input"></a>样例输入 Sample Input</h4><p>3</p><p>1 0 1</p><p>2 0 1</p><p>3</p><p>1 0</p><p>2 0</p><p>1 2</p><h4 id="样例输出-Sample-Output"><a href="#样例输出-Sample-Output" class="headerlink" title="样例输出 Sample Output"></a><strong>样例输出</strong> Sample Output</h4><p>1</p><p>1</p><p>2</p><h4 id="数据范围及提示-Data-Size-amp-Hint"><a href="#数据范围及提示-Data-Size-amp-Hint" class="headerlink" title="数据范围及提示 Data Size &amp; Hint"></a><strong>数据范围及提示</strong> Data Size &amp; Hint</h4><p>1&lt;=n&lt;=50000， 1&lt;=m&lt;=75000， 0&lt;=c&lt;=1000</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>LCA的一个性质:树上任意两点间的最短距离长度等于他们两个到树根的距离减去两倍LCA到树根的距离.</p><p>于是利用这个性质,求出LCA后直接回答即可.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500005</span>,maxm=<span class="number">500005</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> edge[maxn],dis[maxn],dep[maxn],tot,f[maxn][<span class="number">20</span>],lg[maxn],head[maxn],ver[maxm&lt;&lt;<span class="number">1</span>],Nxt[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,edge[tot]=l,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">f[u][<span class="number">0</span>]=fa,dep[u]=dep[fa]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dep[u];i++)f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])<span class="keyword">if</span>(ver[i]!=fa)dis[ver[i]]=dis[u]+edge[i],dfs(ver[i],u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(dep[u]&gt;dep[v])u=f[u][lg[dep[u]-dep[v]]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=lg[dep[u]]<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>(f[u][i]!=f[v][i])u=f[u][i],v=f[v][i];</span><br><span class="line"><span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;<span class="keyword">int</span> u,v,l;<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;l);u+=<span class="number">1</span>,v+=<span class="number">1</span>,add(u,v,l),add(v,u,l);&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)lg[i]=lg[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;lg[i<span class="number">-1</span>]==i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;<span class="keyword">int</span> u,v;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);u+=<span class="number">1</span>,v+=<span class="number">1</span>;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[u]+dis[v]<span class="number">-2</span>*dis[lca(u,v)]);&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51nod1674 区间的价值V2 题解</title>
      <link href="/2019/09/19/51nod1674/"/>
      <url>/2019/09/19/51nod1674/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://www.51nod.com/Challenge/Problem.html#problemId=1674" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>lyk拥有一个区间。</p><p>它规定一个区间的价值为这个区间中所有数and起来的值与这个区间所有数or起来的值的乘积。</p><p>例如3个数2,3,6。它们and起来的值为2，or起来的值为7，这个区间对答案的贡献为2*7=14。</p><p>现在lyk有一个n个数的序列，它想知道所有n*(n+1)/2个区间的贡献的和对1000000007取模后的结果是多少。</p><p>例如当这个序列为{3,4,5}时，那么区间[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]的贡献分别为9,0,0,16,20,25。</p><a id="more"></a><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行一个数n(1&lt;=n&lt;=100000)。<br>接下来一行n个数ai，表示这n个数(0&lt;=ai&lt;=10^9)。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>仅一行表示答案</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>3<br>3 4 5</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>70</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>由于与运算和或运算都具有收敛性：即参与运算的数越多结果则越靠拢0或1，那么我们就可以对离散化的答案开一个map，然后对一个区间进行分治，然后将相同的答案累计个数并乘起来即可，注意取模的位置。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  maxn=<span class="number">100005</span>;</span><br><span class="line">ll sz[maxn],n,AND[maxn],OR[maxn],ans;</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;ll,ll&gt;,ll&gt; mp,mp2;</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;ll,ll&gt;,ll&gt;::iterator it,it2;<span class="comment">//第一维为与，第二维为或</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("%d %d\n",L,R);</span></span><br><span class="line"><span class="keyword">if</span>(L&gt;R)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">mp.clear(),mp2.clear();</span><br><span class="line">AND[mid]=sz[mid],OR[mid]=sz[mid],mp[make_pair(sz[mid],sz[mid])]++,mp2[make_pair(sz[mid],sz[mid])]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=mid<span class="number">-1</span>;i&gt;=L;i--)AND[i]=AND[i+<span class="number">1</span>]&amp;sz[i],OR[i]=OR[i+<span class="number">1</span>]|sz[i],mp[make_pair(AND[i],OR[i])]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=R;i++)  AND[i]=AND[i<span class="number">-1</span>]&amp;sz[i],OR[i]=OR[i<span class="number">-1</span>]|sz[i],mp2[make_pair(AND[i],OR[i])]++;</span><br><span class="line"><span class="keyword">for</span>(it=mp.begin();it!=mp.end();it++)<span class="keyword">for</span>(it2=mp2.begin();it2!=mp2.end();it2++)ans=(ans+((*it).first.first&amp;(*it2).first.first)*((*it).first.second|(*it2).first.second)%mod*(*it).second*(*it2).second)%mod;</span><br><span class="line">solve(L,mid<span class="number">-1</span>);solve(mid+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;sz[i]);</span><br><span class="line">solve(<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj1125 Stockbroker Grapevine 题解</title>
      <link href="/2019/09/19/poj1125/"/>
      <url>/2019/09/19/poj1125/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://poj.org/problem?id=1125" target="_blank" rel="noopener">传送门</a></p><h4 id="Description-题目描述"><a href="#Description-题目描述" class="headerlink" title="Description 题目描述"></a>Description 题目描述</h4><p>Stockbrokers are known to overreact to rumours. You have been contracted to develop a method of spreading disinformation amongst the stockbrokers to give your employer the tactical edge in the stock market. For maximum effect, you have to spread the rumours in the fastest possible way.</p><p>Unfortunately for you, stockbrokers only trust information coming from their “Trusted sources” This means you have to take into account the structure of their contacts when starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the rumour on to each of his colleagues. Your task will be to write a program that tells you which stockbroker to choose as your starting point for the rumour, as well as the time it will take for the rumour to spread throughout the stockbroker community. This duration is measured as the time needed for the last person to receive the information.</p><a id="more"></a><h4 id="Input-输入"><a href="#Input-输入" class="headerlink" title="Input 输入"></a>Input 输入</h4><p>Your program will input data for different sets of stockbrokers. Each set starts with a line with the number of stockbrokers. Following this is a line for each stockbroker which contains the number of people who they have contact with, who these people are, and the time taken for them to pass the message to each person. The format of each stockbroker line is as follows: The line starts with the number of contacts (n), followed by n pairs of integers, one pair for each contact. Each pair lists first a number referring to the contact (e.g. a ‘1’ means person number one in the set), followed by the time in minutes taken to pass a message to that person. There are no special punctuation symbols or spacing rules.</p><p>Each person is numbered 1 through to the number of stockbrokers. The time taken to pass the message on will be between 1 and 10 minutes (inclusive), and the number of contacts will range between 0 and one less than the number of stockbrokers. The number of stockbrokers will range from 1 to 100. The input is terminated by a set of stockbrokers containing 0 (zero) people.</p><h4 id="Output-输出"><a href="#Output-输出" class="headerlink" title="Output 输出"></a>Output 输出</h4><p>For each set of data, your program must output a single line containing the person who results in the fastest message transmission, and how long before the last person will receive any given message after you give it to this person, measured in integer minutes.<br>It is possible that your program will receive a network of connections that excludes some persons, i.e. some people may be unreachable. If your program detects such a broken network, simply output the message “disjoint”. Note that the time taken to pass the message from person A to person B is not necessarily the same as the time taken to pass it from B to A, if such transmission is possible at all.</p><h4 id="Sample-Input-样例输入"><a href="#Sample-Input-样例输入" class="headerlink" title="Sample Input 样例输入"></a>Sample Input 样例输入</h4><p>3<br>2 2 4 3 5<br>2 1 2 3 6<br>2 1 2 2 2<br>5<br>3 4 4 2 8 5 3<br>1 5 8<br>4 1 6 4 10 2 7 5 2<br>0<br>2 2 5 1 5<br>0</p><h4 id="Sample-Output-样例输出"><a href="#Sample-Output-样例输出" class="headerlink" title="Sample Output 样例输出"></a>Sample Output 样例输出</h4><p>3 2<br>3 10</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>题意简述:有n个人,他们要以最快速度互相传递一个消息,现在已知每个人可以传递的人及传递时间,求能用最短时间传递完信息的1那个人</p><p>n小于100,然后根据题意可知答案是一个能将消息传递给其他所有人且传递最长时间最短的人,于是跑一遍floyd然后$\mathcal O(n^2)$统计即可得出答案.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,f[<span class="number">105</span>][<span class="number">105</span>],ans,pos;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)f[i][j]=<span class="number">192608171</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)f[i][i]=<span class="number">0</span>;</span><br><span class="line">ans=<span class="number">0x7ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">f[i][j]=min(f[i][j],f[i][k]+f[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i][j]==<span class="number">192608171</span>)&#123;vis=<span class="literal">true</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(f[i][j]&gt;tmp)tmp=f[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp&lt;ans)&#123;ans=tmp,pos=i;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> m;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;<span class="keyword">int</span> tmp,l;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;tmp,&amp;l),f[i][tmp]=min(f[i][tmp],l);&#125;</span><br><span class="line">floyd();</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,pos,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj2481 Cows 题解</title>
      <link href="/2019/09/18/poj2481/"/>
      <url>/2019/09/18/poj2481/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://poj.org/problem?id=2481" target="_blank" rel="noopener">传送门</a></p><h4 id="Description-问题描述"><a href="#Description-问题描述" class="headerlink" title="Description 问题描述"></a>Description 问题描述</h4><p> Farmer John’s cows have discovered that the clover growing along the ridge of the hill (which we can think of as a one-dimensional number line) in his field is particularly good.</p><p>Farmer John has N cows (we number the cows from 1 to N). Each of Farmer John’s N cows has a range of clover that she particularly likes (these ranges might overlap). The ranges are defined by a closed interval [S,E].</p><p>But some cows are strong and some are weak. Given two cows: cowi and cowj, their favourite clover range is [Si, Ei] and [Sj, Ej]. If Si &lt;= Sj and Ej &lt;= Ei and Ei - Si &gt; Ej - Sj, we say that cowi is stronger than cowj.</p><p>For each cow, how many cows are stronger than her? Farmer John needs your help!  </p><a id="more"></a><h4 id="Input-输入"><a href="#Input-输入" class="headerlink" title="Input 输入"></a>Input 输入</h4><p>The input contains multiple test cases.<br>For each test case, the first line is an integer N (1 &lt;= N &lt;= 105), which is the number of cows. Then come N lines, the i-th of which contains two integers: S and E(0 &lt;= S &lt; E &lt;= 105) specifying the start end location respectively of a range preferred by some cow. Locations are given as distance from the start of the ridge.</p><p>The end of the input contains a single 0.  </p><h4 id="Output-输出"><a href="#Output-输出" class="headerlink" title="Output 输出"></a>Output 输出</h4><p>For each test case, output one line containing n space-separated integers, the i-th of which specifying the number of cows that are stronger than $cow_i$.</p><h4 id="Sample-Input-样例输入"><a href="#Sample-Input-样例输入" class="headerlink" title="Sample Input 样例输入"></a>Sample Input 样例输入</h4><p>3<br>1 2<br>0 3<br>3 4<br>0</p><h4 id="Sample-Output-样例输出"><a href="#Sample-Output-样例输出" class="headerlink" title="Sample Output 样例输出"></a>Sample Output 样例输出</h4><p>1 0 0</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>题意简述：一头奶牛能吃区间$[l,r]$的草，如果任意一头奶牛的这个范围在另一头奶牛的这个范围之内（重合除外），那么我们就说另一头奶牛更强壮，求出比每一头奶牛强壮的奶牛的数量。</p><p>我们可以根据每个奶牛的区间的左端点排序，因为对于任意一个比它强的奶牛，左端点必定是在他左边的。然后对着坐标轴开一个树状数组，统计右端点到最大坐标间的奶牛个数，记录原始下标即可得到答案。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">14</span>;</span><br><span class="line"><span class="keyword">int</span> n,c[maxn],ans[maxn],lst;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cow</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="keyword">int</span> xb;</span><br><span class="line">&#125;sz[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(cow cp1,cow cp2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cp1.l==cp2.l)<span class="keyword">return</span> cp1.r&gt;cp2.r;</span><br><span class="line"><span class="keyword">return</span> cp1.l&lt;cp2.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=<span class="number">1e5</span>+<span class="number">1</span>;x+=x&amp;-x)c[x]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x&gt;<span class="number">0</span>;x-=x&amp;-x)res+=c[x];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>&amp;&amp;n)&#123;</span><br><span class="line">lst=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)sz[i].xb=i,<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sz[i].l,&amp;sz[i].r),sz[i].l+=<span class="number">1</span>,sz[i].r+=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//for(register int i=1;i&lt;=n;i++)printf("%d %d\n",sz[i].l,sz[i].r);</span></span><br><span class="line">sort(sz+<span class="number">1</span>,sz+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//printf("xb:%d\n",sz[i].xb);</span></span><br><span class="line"><span class="keyword">int</span> tmp=ask(<span class="number">1e5</span>+<span class="number">1</span>)-ask(sz[i].r<span class="number">-1</span>);</span><br><span class="line">add(sz[i].r,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(sz[i].r==sz[i<span class="number">-1</span>].r&amp;&amp;sz[i].l==sz[i<span class="number">-1</span>].l)&#123;ans[sz[i].xb]=lst;<span class="keyword">continue</span>;&#125;</span><br><span class="line">ans[sz[i].xb]=tmp,lst=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line"><span class="keyword">if</span>(i!=n)<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3155 [CQOI2009]叶子的染色 题解</title>
      <link href="/2019/09/15/P3155/"/>
      <url>/2019/09/15/P3155/</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P3155" target="_blank" rel="noopener">传送门</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给一棵m个结点的无根树，你可以选择一个度数大于1的结点作为根，然后给一些结点（根、内部结点和叶子均可）着以黑色或白色。你的着色方案应该保证根结点到每个叶子的简单路径上都至少包含一个有色结点（哪怕是这个叶子本身）。 对于每个叶结点u，定义c[u]为从根结点从U的简单路径上最后一个有色结点的颜色。给出每个c[u]的值，设计着色方案，使得着色结点的个数尽量少。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个正整数m, n，其中n是叶子的个数，m是结点总数。结点编号为1，2，…，m，其中编号1，2，… ，n是叶子。以下n行每行一个0或1的整数（0表示黑色，1表示白色），依次为c[1]，c[2]，…，c[n]。以下m-1行每行两个整数a，b（1&lt;=a &lt; b &lt;= m），表示结点a和b 有边相连。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>仅一个数，即着色结点数的最小值。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>5 3<br>0<br>1<br>0<br>1 4<br>2 5<br>4 5<br>3 5</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>2</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>基本的树形dp，设$f_{u,i}$为以$u$ 根节点的子树所需染色的最小节点数</p><p>发现对于一个节点只有白色，黑色，无色三种情况</p><p>于是就可以得到三个转移方程：</p><p>$f_{u,0}=min(f_{u,2},f_{u,0}-1,f_{u,1})$</p><p>$f_{u,1}=min(f_{u,2},f_{u,0},f_{u,1}-1)$</p><p>$f_{u,2}=min(f_{u,2},f_{u,0},f_{u,1})$</p><p>($v \in son[s]$)</p><p>然后dfs即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">10005</span>*<span class="number">2</span>,inf=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> deg[maxm],root,c[maxm],head[maxm],ver[maxm],Nxt[maxm],tot;</span><br><span class="line"><span class="keyword">int</span> f[maxm][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("dfs:%d %d\n",u,fa);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(ver[i]==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs(ver[i],u);</span><br><span class="line"><span class="keyword">int</span> v=ver[i];</span><br><span class="line">f[u][<span class="number">0</span>]+=min(f[v][<span class="number">2</span>],min(f[v][<span class="number">1</span>],f[v][<span class="number">0</span>]<span class="number">-1</span>));</span><br><span class="line">f[u][<span class="number">1</span>]+=min(f[v][<span class="number">2</span>],min(f[v][<span class="number">1</span>]<span class="number">-1</span>,f[v][<span class="number">0</span>]));</span><br><span class="line">f[u][<span class="number">2</span>]+=min(f[v][<span class="number">2</span>],min(f[v][<span class="number">1</span>],f[v][<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;=n)f[i][c[i]]=<span class="number">1</span>,f[i][!c[i]]=inf,f[i][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>f[i][<span class="number">0</span>]=<span class="number">1</span>,f[i][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("leaf.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("leaf.out","w",stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="comment">//printf("%d %d\n",u,v);</span></span><br><span class="line">add(u,v);add(v,u);</span><br><span class="line">deg[u]++,deg[v]++;</span><br><span class="line"><span class="keyword">if</span>(deg[u]&gt;<span class="number">1</span>&amp;&amp;!root)&#123;</span><br><span class="line">root=u;</span><br><span class="line"><span class="comment">//printf("uYes");</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(deg[v]&gt;<span class="number">1</span>&amp;&amp;!root)&#123;</span><br><span class="line">root=v;</span><br><span class="line"><span class="comment">//printf("vYes%d\n",deg[4]);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br><span class="line">dfs(root,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,min(f[root][<span class="number">2</span>],min(f[root][<span class="number">1</span>],f[root][<span class="number">0</span>])));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1627 [CQOI2009]中位数 题解</title>
      <link href="/2019/09/15/P1627/"/>
      <url>/2019/09/15/P1627/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出1~n的一个排列，统计该排列有多少个长度为奇数的连续子序列的中位数是b。中位数是指把所有元素从小到大排列后，位于中间的数。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行为两个正整数n和b，第二行为1~n的排列。</p><p>【数据规模】<br>对于30%的数据中，满足n≤100；<br>对于60%的数据中，满足n≤1000；<br>对于100%的数据中，满足n≤100000,1≤b≤n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，即中位数为b的连续子序列个数。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>7 4<br>5 7 2 4 3 1 6</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>4</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>由于此题给出的数列是一个全排列，考虑把大于b的数转换为1，小于b的数转换为0，那么满足题意的数就是包含b的一段和为0的连续子序列，所以我们可以在一开始就找到中位数b所在的位置，然后向前向后扫，设$cntl_i$和$cntr_i$分别表示左边与右边前缀和为$i$的子序列的个数，那么答案就是$\sum_{i=-n+1}^n cntl_i*cntr_{0-i}$</p><p>因为下表不能表示负数，所以把前缀和全部加上n即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,sz[maxn],idx,suml[maxn*<span class="number">2</span>],sumr[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("median.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("median.out","w",stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sz[i]);</span><br><span class="line"><span class="keyword">if</span>(sz[i]==m)idx=i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sz[i]&gt;m)sz[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> sz[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">suml[n]=sumr[n]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=idx<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)sum+=sz[i],suml[sum+n]++;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=idx+<span class="number">1</span>;i&lt;=n;i++)sum+=sz[i],sumr[sum+n]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=-n+<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)ans+=suml[i+n]*sumr[<span class="number">0</span>-i+n];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4157 [SCOI2006]整数划分 题解</title>
      <link href="/2019/09/15/P4157/"/>
      <url>/2019/09/15/P4157/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>从文件中读入一个正整数n（10≤n≤31000）。要求将n写成若干个正整数之和，并且使这些正整数的乘积最大。</p><p>例如，n=13，则当n表示为4+3+3+3（或2+2+3+3+3）时，乘积=108为最大。</p><a id="more"></a><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>只有一个正整数：n （10≤n≤31000）</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>第1行输出一个整数，为最大乘积的位数。</p><p>第2行输出最大乘积的前100位，如果不足100位，则按实际位数输出最大乘积。</p><p>（提示：在给定的范围内，最大乘积的位数不超过5000位）。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>13</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>3<br>108</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>可以证明，任意数分解成2和3都比其他数更优.<br>假设说我们把一个数分解为比2和3更大的数，那么很明显的他能得到的乘积会更小。<br>于是就优先分3,然后不断减小，直到不大于5.<br>然后在5范围以内，可以知道4拆分成2+2更优<br>加特判即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">1000005</span>],tot,n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Nxt</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)ans[i+<span class="number">1</span>]+=(ans[i]/<span class="number">10</span>),ans[i]%=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(ans[tot+<span class="number">1</span>]!=<span class="number">0</span>)tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">multi</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=tot;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">ans[i]*=x;</span><br><span class="line">&#125;</span><br><span class="line">Nxt();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("integer.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("integer.out","w",stdout);</span></span><br><span class="line">ans[<span class="number">1</span>]=<span class="number">1</span>,tot=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">5</span>)&#123;n-=<span class="number">3</span>;multi(<span class="number">3</span>);&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">5</span>)multi(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">4</span>)multi(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">else</span>multi(n);</span><br><span class="line">Nxt();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tot);</span><br><span class="line"><span class="keyword">if</span>(tot&lt;=<span class="number">100</span>)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=tot;i&gt;=<span class="number">1</span>;i--)<span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line"><span class="keyword">else</span><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=tot;i&gt;=tot<span class="number">-100</span>+<span class="number">1</span>;i--)<span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hzu2105 Digits Count 题解</title>
      <link href="/2019/09/11/hzu2105/"/>
      <url>/2019/09/11/hzu2105/</url>
      
        <content type="html"><![CDATA[<h4 id="Problem-Description-问题描述"><a href="#Problem-Description-问题描述" class="headerlink" title="Problem Description 问题描述"></a>Problem Description 问题描述</h4><p>Given N integers A={A[0],A[1],…,A[N-1]}. Here we have some operations:</p><p><strong>Operation 1:</strong> AND opn L R</p><p>Here opn, L and R are integers.</p><p>For L≤i≤R, we do A[i]=A[i] AND opn (here “AND” is bitwise operation).</p><p><strong>Operation 2:</strong> OR opn L R</p><p>Here opn, L and R are integers.</p><p>For L≤i≤R, we do A[i]=A[i] OR opn (here “OR” is bitwise operation).</p><p><strong>Operation 3:</strong> XOR opn L R</p><p>Here opn, L and R are integers.</p><p>For L≤i≤R, we do A[i]=A[i] XOR opn (here “XOR” is bitwise operation).</p><p><strong>Operation 4:</strong> SUM L R</p><p>We want to know the result of A[L]+A[L+1]+…+A[R].</p><p>Now can you solve this easy problem?</p><h4 id="Input-输入"><a href="#Input-输入" class="headerlink" title="Input 输入"></a>Input 输入</h4><p>The first line of the input contains an integer T, indicating the number of test cases. (T≤100)</p><p>Then T cases, for any case, the first line has two integers n and m (1≤n≤1,000,000, 1≤m≤100,000), indicating the number of elements in A and the number of operations.</p><p>Then one line follows n integers A[0], A[1], …, A[n-1] (0≤A[i]&lt;16,0≤i&lt;n).</p><p>Then m lines, each line must be one of the 4 operations above. (0≤opn≤15)</p><h4 id="Output-输出"><a href="#Output-输出" class="headerlink" title="Output 输出"></a>Output 输出</h4><p>For each test case and for each “SUM” operation, please output the result with a single line.</p><h4 id="Sample-Input-样例输入"><a href="#Sample-Input-样例输入" class="headerlink" title="Sample Input 样例输入"></a>Sample Input 样例输入</h4><p>1<br>4 4<br>1 2 4 7<br>SUM 0 2<br>XOR 5 0 0<br>OR 6 0 3<br>SUM 0 2</p><h4 id="Sample-Output-样例输出"><a href="#Sample-Output-样例输出" class="headerlink" title="Sample Output 样例输出"></a>Sample Output 样例输出</h4><p>7<br>18</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>位运算的线段树。我们发现，由于opt&lt;16，所以可以开四棵线段树来记录每一位上的情况，同时标记也只有两种：区间置换和区间取反，注意的是两种标记下推时要相互处理消除影响。</p><p>最后求和分开统计即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,sz[maxn],val[<span class="number">5</span>][maxn*<span class="number">4</span>],lazy[<span class="number">5</span>][maxn*<span class="number">4</span>],XOR[<span class="number">5</span>][maxn*<span class="number">4</span>];</span><br><span class="line"><span class="comment">//Segementree</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">val[id][now]=val[id][now&lt;&lt;<span class="number">1</span>]+val[id][now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(lazy[id][now]!=<span class="number">-1</span>)&#123;</span><br><span class="line">lazy[id][now&lt;&lt;<span class="number">1</span>]=lazy[id][now],lazy[id][now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[id][now];</span><br><span class="line">val[id][now&lt;&lt;<span class="number">1</span>]=lazy[id][now]?(mid-l+<span class="number">1</span>):<span class="number">0</span>,val[id][now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[id][now]?(r-mid):<span class="number">0</span>;</span><br><span class="line">lazy[id][now]=<span class="number">-1</span>,XOR[id][now]=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(XOR[id][now])&#123;</span><br><span class="line">val[id][now&lt;&lt;<span class="number">1</span>]=(mid-l+<span class="number">1</span>)-val[id][now&lt;&lt;<span class="number">1</span>],val[id][now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(r-mid)-val[id][now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">XOR[id][now&lt;&lt;<span class="number">1</span>]^=XOR[id][now],XOR[id][now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]^=XOR[id][now],XOR[id][now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(lazy[id][now&lt;&lt;<span class="number">1</span>]!=<span class="number">-1</span>)lazy[id][now&lt;&lt;<span class="number">1</span>]^=<span class="number">1</span>,XOR[id][now&lt;&lt;<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(lazy[id][now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]!=<span class="number">-1</span>)lazy[id][now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]^=<span class="number">1</span>,XOR[id][now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("%d %d %d\n",l,r,now);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="comment">//printf("%d %d\n",i,now);</span></span><br><span class="line">lazy[i][now]=<span class="number">-1</span>,XOR[i][now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> id=<span class="number">1</span>;id&lt;=<span class="number">4</span>;id++)&#123;</span><br><span class="line"><span class="comment">//printf("%d\n",val[id][now]);</span></span><br><span class="line"><span class="keyword">if</span>((sz[l]&amp;(<span class="number">1</span>&lt;&lt;(id<span class="number">-1</span>))))val[id][now]=<span class="number">1</span>;<span class="keyword">else</span> val[id][now]=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//printf("%d %d %d %d\n",l,val[id][now],id,now);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,mid,now&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> id=<span class="number">1</span>;id&lt;=<span class="number">4</span>;id++)pushup(id,now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> now,<span class="keyword">int</span> opt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=L&amp;&amp;R&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">val[id][now]=((R-L+<span class="number">1</span>)-val[id][now]);</span><br><span class="line">XOR[id][now]=XOR[id][now]^<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(lazy[id][now]!=<span class="number">-1</span>)lazy[id][now]^=<span class="number">1</span>,XOR[id][now]=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">val[id][now]=<span class="number">0</span>;</span><br><span class="line">lazy[id][now]=<span class="number">0</span>;</span><br><span class="line">XOR[id][now]=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)&#123;</span><br><span class="line">val[id][now]=(R-L+<span class="number">1</span>);</span><br><span class="line">lazy[id][now]=<span class="number">1</span>;</span><br><span class="line">XOR[id][now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushdown(id,now,L,R);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)change(id,L,mid,l,r,now&lt;&lt;<span class="number">1</span>,opt);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)change(id,mid+<span class="number">1</span>,R,l,r,now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,opt);</span><br><span class="line">pushup(id,now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("%d %d\n",l,r);</span></span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=L&amp;&amp;R&lt;=r)<span class="keyword">return</span> val[id][now];</span><br><span class="line">pushdown(id,now,L,R);</span><br><span class="line"><span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)res+=query(id,l,r,L,mid,now&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)res+=query(id,l,r,mid+<span class="number">1</span>,R,now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"> <span class="comment">//pushup(id,now);</span></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("2.txt","w",stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="comment">//printf("at:%d\n",val[4][4]);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> xh=<span class="number">1</span>;xh&lt;=T;xh++)&#123;</span><br><span class="line"><span class="comment">//printf("at:%d\n",val[4][4])</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sz[i]);</span><br><span class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="comment">//printf("Yes\n");</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> qry,l,r;</span><br><span class="line"><span class="keyword">while</span>((ch=getchar())&amp;&amp;(ch&lt;<span class="string">'A'</span>||ch&gt;<span class="string">'Z'</span>));</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'S'</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>((ch=getchar())&amp;&amp;ch&gt;=<span class="string">'A'</span>&amp;&amp;ch&lt;=<span class="string">'Z'</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">l+=<span class="number">1</span>,r+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> id=<span class="number">1</span>;id&lt;=<span class="number">4</span>;id++)&#123;</span><br><span class="line"><span class="comment">//printf("id:%d %d\n",id,query(id,l,r,1,n,1));</span></span><br><span class="line">ans+=((<span class="number">1</span>&lt;&lt;(id<span class="number">-1</span>))*query(id,l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'O'</span>)&#123;<span class="comment">//OR</span></span><br><span class="line"><span class="keyword">while</span>((ch=getchar())&amp;&amp;ch&gt;=<span class="string">'A'</span>&amp;&amp;ch&lt;=<span class="string">'Z'</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;qry,&amp;l,&amp;r);</span><br><span class="line">l+=<span class="number">1</span>,r+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> id=<span class="number">1</span>;id&lt;=<span class="number">4</span>;id++)&#123;</span><br><span class="line"><span class="keyword">if</span>(qry&amp;(<span class="number">1</span>&lt;&lt;(id<span class="number">-1</span>)))&#123;</span><br><span class="line">change(id,<span class="number">1</span>,n,l,r,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'X'</span>)&#123;<span class="comment">//XOR</span></span><br><span class="line"><span class="keyword">while</span>((ch=getchar())&amp;&amp;ch&gt;=<span class="string">'A'</span>&amp;&amp;ch&lt;=<span class="string">'Z'</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;qry,&amp;l,&amp;r);</span><br><span class="line">l+=<span class="number">1</span>,r+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> id=<span class="number">1</span>;id&lt;=<span class="number">4</span>;id++)&#123;</span><br><span class="line"><span class="keyword">if</span>(qry&amp;(<span class="number">1</span>&lt;&lt;(id<span class="number">-1</span>)))&#123;</span><br><span class="line">change(id,<span class="number">1</span>,n,l,r,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'A'</span>)&#123;<span class="comment">//AND</span></span><br><span class="line"><span class="keyword">while</span>((ch=getchar())&amp;&amp;ch&gt;=<span class="string">'A'</span>&amp;&amp;ch&lt;=<span class="string">'Z'</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;qry,&amp;l,&amp;r);</span><br><span class="line">l+=<span class="number">1</span>,r+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> id=<span class="number">1</span>;id&lt;=<span class="number">4</span>;id++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!(qry&amp;(<span class="number">1</span>&lt;&lt;(id<span class="number">-1</span>))))&#123;</span><br><span class="line">change(id,<span class="number">1</span>,n,l,r,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF292D Connected Components 题解</title>
      <link href="/2019/09/10/CF292D/"/>
      <url>/2019/09/10/CF292D/</url>
      
        <content type="html"><![CDATA[<h5 id="Problem-Description-问题描述"><a href="#Problem-Description-问题描述" class="headerlink" title="Problem Description 问题描述"></a>Problem Description 问题描述</h5><p>We already know of the large corporation where Polycarpus works as a system administrator. The computer network there consists of <em>n</em> computers and <em>m</em> cables that connect some pairs of computers. In other words, the computer network can be represented as some non-directed graph with <em>n</em> nodes and <em>m</em> edges. Let’s index the computers with integers from 1 to <em>n</em>, let’s index the cables with integers from 1 to <em>m</em>.</p><p>Polycarpus was given an important task — check the reliability of his company’s network. For that Polycarpus decided to carry out a series of <em>k</em> experiments on the computer network, where the <em>i</em>-th experiment goes as follows:</p><ol><li>Temporarily disconnect the cables with indexes from $l_i$ to $r_i$, inclusive (the other cables remain connected).</li><li>Count the number of connected components in the graph that is defining the computer network at that moment.</li><li>Re-connect the disconnected cables with indexes from $l_i$ to $r_i$ (that is, restore the initial network).</li></ol><p>Help Polycarpus carry out all experiments and for each print the number of connected components in the graph that defines the computer network through the given experiment. Isolated vertex should be counted as single component.</p><a id="more"></a><h5 id="Input-输入"><a href="#Input-输入" class="headerlink" title="Input 输入"></a>Input 输入</h5><p>The first line contains two space-separated integers $n, m (2 ≤ n ≤ 500; 1 ≤ m ≤ 10^4)$ — the number of computers and the number of cables, correspondingly. </p><p>The following m lines contain the cables’ description. The i-th line contains space-separated pair of integers $x_i, y_i (1 ≤ x_i, y_i ≤ n; xi ≠ y_i)$ — the numbers of the computers that are connected by the i-th cable. Note that a pair of computers can be connected by multiple cables.</p><p>The next line contains integer $k (1 ≤ k ≤ 2·10^4)$ — the number of experiments. Next k lines contain the experiments’ descriptions. The i-th line contains space-separated integers $l_i, r_i (1 ≤ l_i ≤ r_i ≤ m)$ — the numbers of the cables that Polycarpus disconnects during the i-th experiment.</p><h5 id="Output-输出"><a href="#Output-输出" class="headerlink" title="Output 输出"></a>Output 输出</h5><p>Print $k$ numbers, the i-th number represents the number of connected components of the graph that defines the computer network during the i-th experiment.</p><h5 id="Sample-Input-样例输入"><a href="#Sample-Input-样例输入" class="headerlink" title="Sample Input 样例输入"></a>Sample Input 样例输入</h5><p>6 5<br>1 2<br>5 4<br>2 3<br>3 1<br>3 6<br>6<br>1 3<br>2 5<br>1 5<br>5 5<br>2 4<br>3 3</p><h5 id="Sample-Output-样例输出"><a href="#Sample-Output-样例输出" class="headerlink" title="Sample Output 样例输出"></a>Sample Output 样例输出</h5><p>4<br>5<br>6<br>3<br>4<br>2</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>由于本题的$n$很小,所以我们可以开一个前缀并查集$pre$和一个后缀并查集$suf$,对于每次查询,我们只要对前缀的$1,l-1$部分和后缀的$r+1,m$部分手动合并即可.</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">10005</span>;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">10005</span>],y[<span class="number">10005</span>],n,m,k,pre[<span class="number">10005</span>][<span class="number">505</span>],suf[<span class="number">10005</span>][<span class="number">505</span>],fa[<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//UnionFind</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get1</span><span class="params">(<span class="keyword">int</span> sz,<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x==pre[sz][x])?x:pre[sz][x]=get1(sz,pre[sz][x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get2</span><span class="params">(<span class="keyword">int</span> sz,<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x==suf[sz][x])?x:suf[sz][x]=get2(sz,suf[sz][x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get3</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x==fa[x])?x:fa[x]=get3(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge1</span><span class="params">(<span class="keyword">int</span> sz,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">if</span>(x!=y)pre[sz][x]=y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge2</span><span class="params">(<span class="keyword">int</span> sz,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">if</span>(x!=y)suf[sz][x]=y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge3</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">if</span>(x!=y)fa[x]=y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">pre[<span class="number">0</span>][i]=i,suf[m+<span class="number">1</span>][i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)pre[i][j]=pre[i<span class="number">-1</span>][j];</span><br><span class="line">merge1(i,get1(i,x[i]),get1(i,y[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)suf[i][j]=suf[i+<span class="number">1</span>][j];</span><br><span class="line">merge2(i,get2(i,x[i]),get2(i,y[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(register int i=1;i&lt;=m;i++)&#123;</span></span><br><span class="line"><span class="comment">for(register int j=1;j&lt;=n;j++)printf("%d ",pre[i][j]);</span></span><br><span class="line"><span class="comment">printf("\n");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for(register int i=m;i&gt;=1;i--)&#123;</span></span><br><span class="line"><span class="comment">for(register int j=1;j&lt;=n;j++)printf("%d ",suf[i][j]);</span></span><br><span class="line"><span class="comment">printf("\n");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=pre[l<span class="number">-1</span>][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)merge3(get3(i),get3(get2(r+<span class="number">1</span>,i)));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(get3(fa[i])==i)ans++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2279[HNOI2003]消防局的设立 题解</title>
      <link href="/2019/09/04/P2279/"/>
      <url>/2019/09/04/P2279/</url>
      
        <content type="html"><![CDATA[<h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>2020年，人类在火星上建立了一个庞大的基地群，总共有n个基地。起初为了节约材料，人类只修建了n-1条道路来连接这些基地，并且每两个基地都能够通过道路到达，所以所有的基地形成了一个巨大的树状结构。如果基地A到基地B至少要经过d条道路的话，我们称基地A到基地B的距离为d。</p><p>由于火星上非常干燥，经常引发火灾，人类决定在火星上修建若干个消防局。消防局只能修建在基地里，每个消防局有能力扑灭与它距离不超过2的基地的火灾。</p><p>你的任务是计算至少要修建多少个消防局才能够确保火星上所有的基地在发生火灾时，消防队有能力及时扑灭火灾。</p><a id="more"></a><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入文件名为input.txt。</p><p>输入文件的第一行为n （n&lt;=1000），表示火星上基地的数目。接下来的n-1行每行有一个正整数，其中文件第i行的正整数为a[i]，表示从编号为i的基地到编号为a[i]的基地之间有一条道路，为了更加简洁的描述树状结构的基地群，有a[i]&lt;i。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出文件名为output.txt</p><p>输出文件仅有一个正整数，表示至少要设立多少个消防局才有能力及时扑灭任何基地发生的火灾。</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><p>6<br>1<br>2<br>3<br>5</p><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><p>2</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>标算是树形dp然而可以用贪心搞……嫌时间不够就暂时用贪心苟着。</p><p>考虑任意一个节点$node_i$，假如它能被处理，那么一定是他的爷爷，他的父亲节点，他的兄弟节点，他的儿子节点，他的孙子节点当中的任意一个部署有消防站。而很显然部署一个在他的爷爷的位置可以解决他和他兄弟，于是贪心的做法就是每次找出未被处理的深度最深的点，然后标记它的爷爷即可。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> ans,fa[maxn],dep[maxn],n,head[maxn],ver[maxn&lt;&lt;<span class="number">1</span>],Nxt[maxn&lt;&lt;<span class="number">1</span>],tot;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">priority_queue&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; pq;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("%d %d\n",u,f);</span></span><br><span class="line">dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(ver[i]==f)<span class="keyword">continue</span>;</span><br><span class="line">fa[ver[i]]=u;</span><br><span class="line">dfs(ver[i],u);</span><br><span class="line">&#125;</span><br><span class="line">pq.push(make_pair(dep[u],u));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">deal</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=ver[i];</span><br><span class="line"><span class="comment">//if(tmp==fa[u])continue;</span></span><br><span class="line">vis[tmp]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=head[tmp];j;j=Nxt[j]) vis[ver[j]]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line">add(i+<span class="number">1</span>,tmp),add(tmp,i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line"><span class="keyword">while</span>(!pq.empty()&amp;&amp;vis[pq.top().second])pq.pop();</span><br><span class="line"><span class="keyword">if</span>(pq.empty())<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> u=pq.top().second;pq.pop();</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">int</span> ls;</span><br><span class="line"><span class="keyword">if</span>(fa[fa[u]]) ls=fa[fa[u]];<span class="keyword">else</span>  ls=<span class="number">1</span>;</span><br><span class="line">deal(ls);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形dp </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1119 灾后重建 题解</title>
      <link href="/2019/09/03/P1119/"/>
      <url>/2019/09/03/P1119/</url>
      
        <content type="html"><![CDATA[<h5 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h5><p><em>B</em>地区在地震过后，所有村庄都造成了一定的损毁，而这场地震却没对公路造成什么影响。但是在村庄重建好之前，所有与未重建完成的村庄的公路均无法通车。换句话说，只有连接着两个重建完成的村庄的公路才能通车，只能到达重建完成的村庄。</p><a id="more"></a><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>给出<em>B</em>地区的村庄数N，村庄编号从0到$N-1$，和所有<em>M</em>条公路的长度，公路是双向的。并给出第$i$个村庄重建完成的时间$t_i$，你可以认为是同时开始重建并在第$t_i$天重建完成，并且在当天即可通车。若$t_i$为0则说明地震未对此地区造成损坏，一开始就可以通车。之后有<em>Q</em>个询问(<em>x</em>,<em>y</em>,<em>t</em>)，对于每个询问你要回答在第<em>t</em>天，从村庄<em>x</em>到村庄y的最短路径长度为多少。如果无法找到从x村庄到y村庄的路径，经过若干个已重建完成的村庄，或者村庄<em>x</em>或村庄<em>y</em>在第t天仍未重建完成 ，则需要返回$-1$。</p><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行包含两个正整数<em>N</em>,<em>M</em>，表示了村庄的数目与公路的数量。</p><p>第二行包含<em>N</em>个非负整数$t_i$，表示了每个村庄重建完成的时间，数据保证了t单调递增。</p><p>接下来<em>M</em>行，每行3个非负整数<em>i</em>,<em>j</em>,<em>w</em>，<em>w</em>为不超过10000的正整数，表示了有一条连接村庄i<em>i</em>与村庄j<em>j</em>的道路，长度为<em>w</em>，保证<em>i</em>≠<em>j</em>，且对于任意一对村庄只会存在一条道路。</p><p>接下来一行也就是<em>M</em>+3行包含一个正整数<em>Q</em>，表示<em>Q</em>个询问。</p><p>接下来<em>Q</em>行，每行3个非负整数<em>x</em>,<em>y</em>,<em>t</em>，询问在第$t$天，从村庄<em>x</em>到村庄<em>y</em>的最短路径长度为多少，数据保证了<em>t</em>是不下降的。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>共<em>Q</em>行，对每一个询问(<em>x</em>,<em>y</em>,<em>t</em>)输出对应的答案，即在第<em>t</em>天，从村庄<em>x</em>到村庄<em>y</em>的最短路径长度为多少。如果在第t天无法找到从<em>x</em>村庄到<em>y</em>村庄的路径，经过若干个已重建完成的村庄，或者村庄x或村庄<em>y</em>在第<em>t</em>天仍未修复完成，则输出−1。</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><p>4 5<br>1 2 3 4<br>0 2 1<br>2 3 1<br>3 1 2<br>2 1 4<br>0 3 5<br>4<br>2 0 2<br>0 1 2<br>0 1 3<br>0 1 4</p><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><p>-1<br>-1<br>5<br>4</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>由于时间具有单调不下降的性质，因此我们可以不断更新最短路</p><p>但是每次用dijkstra和spfa肯定会超时，考虑floyd,我们每次重建完成的村庄的序号是不下降的，回顾floyd的dp阶段，是以$k$个点作为阶段。</p><p>于是每当一个村庄重建完成后就把该阶段的答案更新即可。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Q,n,m,f[<span class="number">205</span>][<span class="number">205</span>],Ti[<span class="number">205</span>],bj;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="comment">//printf("k:%d\n",k);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i][j]&gt;f[i][k]+f[k][j])f[j][i]=f[i][j]=f[i][k]+f[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Ti[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)f[j][i]=f[i][j]=<span class="number">99999999</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)f[i][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">u+=<span class="number">1</span>,v+=<span class="number">1</span>;</span><br><span class="line">f[u][v]=f[v][u]=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Q);</span><br><span class="line">bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;t);</span><br><span class="line">u+=<span class="number">1</span>,v+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(Ti[bj]&lt;=t&amp;&amp;bj&lt;=n)vis[bj]=<span class="literal">true</span>,floyd(bj),bj++;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="literal">false</span>||vis[v]==<span class="literal">false</span>)&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="keyword">if</span>(f[u][v]==<span class="number">99999999</span>)&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[u][v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1776 宝物筛选 题解</title>
      <link href="/2019/09/03/P1776/"/>
      <url>/2019/09/03/P1776/</url>
      
        <content type="html"><![CDATA[<h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>终于，破解了千年的难题。小FF找到了王室的宝物室，里面堆满了无数价值连城的宝物……这下小FF可发财了，嘎嘎。但是这里的宝物实在是太多了，小FF的采集车似乎装不下那么多宝物。看来小FF只能含泪舍弃其中的一部分宝物了……小FF对洞穴里的宝物进行了整理，他发现每样宝物都有一件或者多件。他粗略估算了下每样宝物的价值，之后开始了宝物筛选工作：小FF有一个最大载重为W的采集车，洞穴里总共有n种宝物，每种宝物的价值为v[i]，重量为w[i]，每种宝物有m[i]件。小FF希望在采集车不超载的前提下，选择一些宝物装进采集车，使得它们的价值和最大。</p><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行为一个整数N和w，分别表示宝物种数和采集车的最大载重。</p><p>接下来n行每行三个整数，其中第i行第一个数表示第i类品价值，第二个整数表示一件该类物品的重量，第三个整数为该类物品数量。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出仅一个整数ans，表示在采集车不超载的情况下收集的宝物的最大价值。</p><a id="more"></a><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><p>4 20<br>3 9 3<br>5 9 1<br>9 4 2<br>8 1 3</p><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><p>47</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>很裸的二进制拆分多重背包，拆分成能表示所有物品组合的物品即可。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">int</span> n,maxv,ans,sz,v[maxn],val[maxn],dp[maxn],tot;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;maxv);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> w,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;w,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;j&lt;&lt;=<span class="number">1</span>)val[++tot]=w*j,v[tot]=b*j,c-=j;</span><br><span class="line"><span class="keyword">if</span>(c)val[++tot]=w*c,v[tot]=b*c;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=maxv;j&gt;=v[i];j--)&#123;</span><br><span class="line">dp[j]=max(dp[j],dp[j-v[i]]+val[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=maxv;i++)ans=max(ans,dp[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多重背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu5172GTY&#39;s Gayfriends 题解</title>
      <link href="/2019/09/02/hdu5172/"/>
      <url>/2019/09/02/hdu5172/</url>
      
        <content type="html"><![CDATA[<h4 id="Problem-Description-问题描述"><a href="#Problem-Description-问题描述" class="headerlink" title="Problem Description 问题描述"></a>Problem Description 问题描述</h4><p>GTY has $n$ gay friends. To manage them conveniently, every morning he ordered all his gay friends to stand in a line. Every gay friend has a characteristic value $a_i$ , to express how manly or how girlish he is. You, as GTY’s assistant, have to answer GTY’s queries. In each of GTY’s queries, GTY will give you a range$ [l,r]$ . Because of GTY’s strange hobbies, he wants there is a permutation $[1..r−l+1]$ in $[l,r]$. You need to let him know if there is such a permutation or not.</p><h4 id="Input-输入"><a href="#Input-输入" class="headerlink" title="Input 输入"></a>Input 输入</h4><p>Multi test cases (about 3) . The first line contains two integers n and m ($ 1≤n,m≤1000000$ ), indicating the number of GTY’s gay friends and the number of GTY’s queries. the second line contains n numbers seperated by spaces. The $i^{th}$ number ai ( 1≤$a_i$≤n ) indicates GTY’s ith gay friend’s characteristic value. The next m lines describe GTY’s queries. In each line there are two numbers l and r seperated by spaces ( $1≤l≤r≤n$ ), indicating the query range.</p><h4 id="Output-输出"><a href="#Output-输出" class="headerlink" title="Output 输出"></a>Output 输出</h4><p>For each query, if there is a permutation$ [1..r−l+1]$ in $[l,r]$, print ‘YES’, else print ‘NO’.</p><a id="more"></a><h4 id="Sample-Input-样例输入"><a href="#Sample-Input-样例输入" class="headerlink" title="Sample Input 样例输入"></a>Sample Input 样例输入</h4><p>8 5<br>2 1 3 4 5 2 3 1<br>1 3<br>1 1<br>2 2<br>4 8<br>1 5<br>3 2<br>1 1 1<br>1 1<br>1 2</p><h4 id="Sample-Output-样例输出"><a href="#Sample-Output-样例输出" class="headerlink" title="Sample Output 样例输出"></a>Sample Output 样例输出</h4><p>YES<br>NO<br>YES<br>YES<br>YES<br>YES<br>NO</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题要求给出的区间是否是$[1,r-l+1]$的一个全排列，那么首先我们求一下是否对应和与原排列对应和相同。</p><p>然后的话就是看是否有重复的数出现，我们对于原数组每一个数$a_i$都记录一下其相同的值上次出现的位置，然后对这个位置开一颗维护$max$的线段树，然后查询区间内出现过的值是否上次出现位置都在$l$之前即可.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2000015</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,sz[maxn],lxt[maxn],pos[maxn];</span><br><span class="line"><span class="keyword">int</span> val[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">val[p]=max(val[p&lt;&lt;<span class="number">1</span>],val[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">val[p]=pos[l];<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(l,mid,p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build(mid+<span class="number">1</span>,r,p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)<span class="keyword">return</span> val[now] ;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)res=max(res,ask(L,R,l,mid,now&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid)res=max(res,ask(L,R,mid+<span class="number">1</span>,r,now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">memset</span>(lxt,<span class="number">0</span>,<span class="keyword">sizeof</span>(lxt));</span><br><span class="line"><span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="keyword">sizeof</span>(val));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sz[i]),sum[i]=sum[i<span class="number">-1</span>]+sz[i],pos[i]=lxt[sz[i]],lxt[sz[i]]=i;</span><br><span class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="keyword">if</span>((sum[r]-sum[l<span class="number">-1</span>])!=(<span class="number">1L</span>L*(r-l+<span class="number">2</span>)*(r-l+<span class="number">1</span>))/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ask(l,r,<span class="number">1</span>,n,<span class="number">1</span>)&lt;l)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客暑期noip提高组模拟(五) 解题报告</title>
      <link href="/2019/08/24/nowcoder5/"/>
      <url>/2019/08/24/nowcoder5/</url>
      
        <content type="html"><![CDATA[<h4 id="A-deco的abs"><a href="#A-deco的abs" class="headerlink" title="A deco的abs"></a>A deco的abs</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>设$delta_i==sz_i-sz_{i-1}$,那么对于任意的$delta_i$很明显我们可以对其加上任意大小的$d$使其绝对值最小,并且由于其他所有数操作次数都是无限的,所以可以任意修改不影响相对大小关系，然后不断取最小值即可。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,d,sz[<span class="number">10000005</span>],delta[<span class="number">10000005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)   <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sz[i]),delta[i]=sz[i]-sz[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> pre=delta[i]%d;</span><br><span class="line">            delta[i]%=d,delta[i]+=d;</span><br><span class="line">            ans+=min(<span class="built_in">abs</span>(pre),delta[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(delta[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> pre=delta[i]%d;</span><br><span class="line">            delta[i]%=d,delta[i]-=d;</span><br><span class="line">            ans+=min(<span class="built_in">abs</span>(delta[i]),pre);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(delta[i]==<span class="number">0</span>)   <span class="keyword">continue</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="deco的gcd"><a href="#deco的gcd" class="headerlink" title="deco的gcd"></a>deco的gcd</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>考虑最大公约数的原理，对于任意两个数$x$,$y$，以及一个公因数$p$(质数),那么这个质数对于gcd有贡献的部分肯定是这两个数所拥有的最小幂次。所以可以预处理出每一个数的最小的质因数的幂次，然后不断除，用欧拉降幂计算答案贡献即可。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>,maxn=<span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> cs[maxn][<span class="number">24</span>],cnt,pri[maxn],ycl[<span class="number">10000005</span>],n,sz[<span class="number">1000015</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1000015</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) pri[++cnt]=i,ycl[i]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;i*pri[j]&lt;=maxn&amp;&amp;j&lt;=cnt;j++)&#123;</span><br><span class="line">            vis[i*pri[j]]=<span class="literal">true</span>,ycl[i*pri[j]]=pri[j];</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, base = a;</span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="number">1L</span>L*res*base%mod;</span><br><span class="line">        base=<span class="number">1L</span>L*base*base%mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//  freopen("test.txt","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    prime();</span><br><span class="line">    ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sz[i]);</span><br><span class="line">        <span class="keyword">while</span>(sz[i]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=ycl[sz[i]],tot=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(sz[i]%tmp==<span class="number">0</span>) sz[i]/=tmp,cs[tmp][++tot]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">18</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=cs[pri[i]][j];</span><br><span class="line">            <span class="keyword">if</span>(tmp&lt;=<span class="number">1</span>)   <span class="keyword">break</span>;</span><br><span class="line">            (sum+=<span class="number">1L</span>L*tmp*(tmp<span class="number">-1</span>)/<span class="number">2</span>%(mod<span class="number">-1</span>))%=(mod<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        (ans*=(<span class="number">1L</span>L*qpow(pri[i],sum)))%=mod;</span><br><span class="line">        <span class="comment">//if(i==1) printf("%d %d %d %d\n",pri[i],sum,ans);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="deco的str"><a href="#deco的str" class="headerlink" title="deco的str"></a>deco的str</h4><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>奇妙的hash。首先预处理出S的所有hash值，同时求出T的所有循环连接的hash值，然后求出前缀和，查询即可。</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1000000007</span>,maxn=<span class="number">10000015</span>,P=<span class="number">100007</span>;</span><br><span class="line"><span class="keyword">char</span> S[<span class="number">10000005</span>],T[<span class="number">10000005</span>];</span><br><span class="line"><span class="keyword">int</span> tot,lens,lent,seed=<span class="number">131</span>;</span><br><span class="line">ull  ver[maxn],p[maxn],h[maxn],f[maxn],zz,edge[<span class="number">10000005</span>];</span><br><span class="line"><span class="keyword">int</span> Nxt[<span class="number">10000005</span>],head[<span class="number">10000005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(ull x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> u=head[x%P];u;u=Nxt[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(ver[u]==x)   &#123;edge[u]++;<span class="keyword">return</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ver[++tot]=x,edge[tot]=<span class="number">1</span>,Nxt[tot]=head[x%P],head[x%P]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(ull x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> u=head[x%P];u;u=Nxt[u])    <span class="keyword">if</span>(ver[u]==x)   <span class="keyword">return</span> edge[u];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">gethash</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[R]-h[L<span class="number">-1</span>]*p[R-L+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,S+<span class="number">1</span>);lens=<span class="built_in">strlen</span>(S+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,T+<span class="number">1</span>);lent=<span class="built_in">strlen</span>(T+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(lens&lt;lent*<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1</span>;<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lens;i++)p[i]=p[i<span class="number">-1</span>]*seed;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lens;i++)h[i]=h[i<span class="number">-1</span>]*seed+S[i]-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lent;i++)    zz=zz*seed+T[i]-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">    insert(zz);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lent;i++)zz=(zz-(T[i]-<span class="string">'a'</span>+<span class="number">1</span>)*p[lent<span class="number">-1</span>])*seed+T[i]-<span class="string">'a'</span>+<span class="number">1</span>,insert(zz);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=lent;i&lt;=lens;i++) f[i]=query(h[i]-h[i-lent]*p[lent]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=lent*<span class="number">2</span>;i&lt;=lens;i++)&#123;</span><br><span class="line">        ans=(ans+<span class="number">1L</span>L*f[i]*f[i-lent]%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客暑期noip提高组模拟(四) 解题报告</title>
      <link href="/2019/08/22/nowcoder4/"/>
      <url>/2019/08/22/nowcoder4/</url>
      
        <content type="html"><![CDATA[<h4 id="A-麻将"><a href="#A-麻将" class="headerlink" title="A 麻将"></a>A 麻将</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>因为可以交换无数次，所以可以枚举行数和右端点。</p><p>问题就转化为了类似广告牌问题。</p><p>开一个前缀和记录$sum_j$表示j为右端点的连续1的个数.</p><p>然后开一个桶，记录长度，更新答案即可。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ans,n,m,tmp,jz[<span class="number">5005</span>][<span class="number">5005</span>],sum[<span class="number">5005</span>],tong[<span class="number">5005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//  freopen("test.txt","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;jz[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(jz[j][i]==<span class="number">1</span>) sum[j]=sum[j]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> sum[j]=<span class="number">0</span>;</span><br><span class="line">            tong[sum[j]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tj=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=m;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">            tj+=tong[j],ans=max(ans,j*tj),tong[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="B-卖羊驼"><a href="#B-卖羊驼" class="headerlink" title="B 卖羊驼"></a>B 卖羊驼</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p><del>很明显</del>是一个四边形不等式优化。</p><p>首先考虑$O(n^3)$暴力，设$dp_{k,i}$为分了k组，右端点为$i$时的写出转移方程就是$dp_{k,i}=max{dp_{k-1,j}+sum_{j+1,i}}$,其中$sum_{j+1,i}$表示的是从$j+1$到$i$所有数异或起来的值，直接n方预处理一下就好了。</p><p>然后考虑优化，可以根据四边形不等式的其他分组题（？）来得出这道题的优化方式：一定是从${k-1,i}$到${k,i+1}$中找决策点。然后记录决策点即可。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">5005</span>][<span class="number">5005</span>],ans,n,zu,p[<span class="number">5005</span>],s[<span class="number">1005</span>][<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">1005</span>][<span class="number">5005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;zu);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">sum[j][i]=sum[j][i<span class="number">-1</span>]|p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=zu;i++) s[i][n+<span class="number">1</span>]=n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=zu;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=s[k<span class="number">-1</span>][i];j&lt;=s[k][i+<span class="number">1</span>];j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[k][i]&lt;dp[k<span class="number">-1</span>][j]+sum[j+<span class="number">1</span>][i])&#123;</span><br><span class="line">dp[k][i]=dp[k<span class="number">-1</span>][j]+sum[j+<span class="number">1</span>][i];</span><br><span class="line">s[k][i]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,dp[zu][n]);</span><br><span class="line"><span class="comment">//printf("%d",ans);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-清新题"><a href="#C-清新题" class="headerlink" title="C 清新题"></a>C 清新题</h4><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>线性基加书上启发式合并的裸题，，，然而本垃圾不会所以敲了个暴力还写挂了（丢人）。</p><p>dfs一次，回溯时合并更新答案就好了。</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> tot,head[maxn],ver[maxn&lt;&lt;<span class="number">1</span>],ans[maxn],Nxt[maxn&lt;&lt;<span class="number">1</span>],n,m,val[maxn];</span><br><span class="line"><span class="keyword">int</span> xxj[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> xb)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(u&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</span><br><span class="line"><span class="keyword">if</span>(xxj[xb][i])u^=xxj[xb][i];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">xxj[xb][i]=u;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> xb1,<span class="keyword">int</span> xb2)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">18</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!xxj[xb2][i])<span class="keyword">continue</span>;<span class="keyword">int</span> u=xxj[xb2][i];</span><br><span class="line">insert(u,xb1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">insert(val[u],u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(ver[i]==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs(ver[i],u);</span><br><span class="line">merge(u,ver[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--)ans[u]=max(ans[u],ans[u]^xxj[u][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);add(u,v);add(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val[i]);</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[q]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
            <tag> 玄学 </tag>
            
            <tag> 四边形不等式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客暑期noip提高组模拟(二) 解题报告</title>
      <link href="/2019/08/20/nowcoder2/"/>
      <url>/2019/08/20/nowcoder2/</url>
      
        <content type="html"><![CDATA[<h4 id="A-ACGT"><a href="#A-ACGT" class="headerlink" title="A ACGT"></a>A ACGT</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>没啥好说的,直接上trie树暴力匹配即可。注意由于每个序列只能选一次所以最后ans除以2.</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt,n,ans,len[<span class="number">100005</span>],sum[<span class="number">100005</span>*<span class="number">20</span>],trie[<span class="number">100005</span>*<span class="number">20</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> sr[<span class="number">100005</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'A'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'T'</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'G'</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'C'</span>)    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">deal</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'A'</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'T'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'G'</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'C'</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len[x];i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=getid(sr[x][i]);</span><br><span class="line">        <span class="keyword">if</span>(!trie[now][tmp]) trie[now][tmp]=++cnt;</span><br><span class="line">        now=trie[now][tmp];</span><br><span class="line">    &#125;</span><br><span class="line">    sum[now]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len[x];i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=deal(sr[x][i]);</span><br><span class="line">        <span class="keyword">if</span>(!trie[now][tmp]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> now=trie[now][tmp];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum[now])&#123;</span><br><span class="line">        sum[now]--;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sr[i]+<span class="number">1</span>);</span><br><span class="line">        len[i]=<span class="built_in">strlen</span>(sr[i]+<span class="number">1</span>);</span><br><span class="line">        insert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        query(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="B-幸运数字考试"><a href="#B-幸运数字考试" class="headerlink" title="B 幸运数字考试"></a>B 幸运数字考试</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>根据题意找出1~$10^{18}$内所有符合条件的数,预处理一下,然后由于数据范围很毒,开一下ull输入,特判如果大于18位时满足条件的数就输出十个4和7,否则直接lower_bound()查找满足条件的数.</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line">ull T,sz[<span class="number">10000005</span>],cnt,sr;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">55</span>];</span><br><span class="line"><span class="keyword">bool</span> fx;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,ull now,<span class="keyword">int</span> cnt4,<span class="keyword">int</span> cnt7)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt4==cnt7)&#123;</span><br><span class="line">sz[++cnt]=now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt4&gt;<span class="number">10</span>||cnt7&gt;<span class="number">10</span>||pos==<span class="number">19</span>)<span class="keyword">return</span>;</span><br><span class="line">dfs(pos+<span class="number">1</span>,now*<span class="number">10L</span>L+<span class="number">4</span>,cnt4+<span class="number">1</span>,cnt7);</span><br><span class="line">dfs(pos+<span class="number">1</span>,now*<span class="number">10L</span>L+<span class="number">7</span>,cnt4,cnt7+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">4L</span>L,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">7L</span>L,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">sort(sz+<span class="number">1</span>,sz+cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;sr;</span><br><span class="line">ull ls=sr;</span><br><span class="line"><span class="keyword">int</span> jsq;</span><br><span class="line"><span class="keyword">while</span>(ls)&#123;</span><br><span class="line">ls=ls/<span class="number">10</span>;</span><br><span class="line">jsq++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sr&gt;<span class="number">777777777444444444</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)<span class="built_in">cout</span>&lt;&lt;<span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)<span class="built_in">cout</span>&lt;&lt;<span class="number">7</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> xb=lower_bound(sz+<span class="number">1</span>,sz+cnt+<span class="number">1</span>,sr)-sz;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sz[xb]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="C滑块"><a href="#C滑块" class="headerlink" title="C滑块"></a>C滑块</h5><p>这篇题解咕了，没啥营养价值所以也不打算补（？）。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> trie树 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客暑期noip提高组模拟(一) 解题报告</title>
      <link href="/2019/08/19/nowcoder1/"/>
      <url>/2019/08/19/nowcoder1/</url>
      
        <content type="html"><![CDATA[<h4 id="A-最短路"><a href="#A-最短路" class="headerlink" title="A 最短路"></a>A 最短路</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>很明显和最短路本身没啥关系。 把所有边的边权排个序，然后任意相邻的两条边如果边权之差大于$s$很明显就不能构造出这样的图，这时输出$-1$即可。否则直接按照顺序用双指针记录重边然后连边，思路不难。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> tot,n,s,maxv,now;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> bh;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">&#125;sz[<span class="number">50500</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node cp1,node cp2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cp1.dis==cp2.dis)    <span class="keyword">return</span> cp1.bh&lt;cp2.bh;</span><br><span class="line">    <span class="keyword">return</span> cp1.dis&lt;cp2.dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//  freopen("a.in","r",stdin);</span></span><br><span class="line"><span class="comment">//  freopen("test.txt","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line">        sz[i].dis=tmp;</span><br><span class="line">        sz[i].bh=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(sz+<span class="number">2</span>,sz+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sz[i].dis-sz[i<span class="number">-1</span>].dis&gt;s||sz[i].dis==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pre=<span class="number">0</span>,zq=<span class="number">0</span>,now=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sz[i].dis!=now)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,bj,sz[i].bh,sz[i].dis-now);</span><br><span class="line">            pre=bj;</span><br><span class="line">            zq=now;</span><br><span class="line">            now=sz[i].dis;</span><br><span class="line">            bj=sz[i].bh;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,pre,sz[i].bh,sz[i].dis-zq);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="B-最小生成链"><a href="#B-最小生成链" class="headerlink" title="B 最小生成链"></a>B 最小生成链</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>看到异或第一反应是个trie树，然而仔细一看是边权和，又觉得不可行。仔细读题，会发现枚举的事实上是所有排列当中最大异或值最小的那个，复杂度为$O(n!)$。回顾位运算和异或的性质，二进制下任意位有多个$0$且有$1$时此位才有贡献，因此从1枚举到n找出这个位（二进制意义下），然后枚举所有边，复杂度$O(n^2)$</p><p>我们发现，只有找出的那一位为1去与为0计算才会最大有贡献，因此维护一个trie树，将所有找出那一位为0的树插入，并且用为1的树查询异或值更新答案即可。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> tot,n,s,maxv,now;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> bh;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">&#125;sz[<span class="number">50500</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node cp1,node cp2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cp1.dis==cp2.dis)    <span class="keyword">return</span> cp1.bh&lt;cp2.bh;</span><br><span class="line">    <span class="keyword">return</span> cp1.dis&lt;cp2.dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//  freopen("a.in","r",stdin);</span></span><br><span class="line"><span class="comment">//  freopen("test.txt","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line">        sz[i].dis=tmp;</span><br><span class="line">        sz[i].bh=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(sz+<span class="number">2</span>,sz+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sz[i].dis-sz[i<span class="number">-1</span>].dis&gt;s||sz[i].dis==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pre=<span class="number">0</span>,zq=<span class="number">0</span>,now=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sz[i].dis!=now)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,bj,sz[i].bh,sz[i].dis-now);</span><br><span class="line">            pre=bj;</span><br><span class="line">            zq=now;</span><br><span class="line">            now=sz[i].dis;</span><br><span class="line">            bj=sz[i].bh;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,pre,sz[i].bh,sz[i].dis-zq);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C最小字典最短路"><a href="#C最小字典最短路" class="headerlink" title="C最小字典最短路"></a>C最小字典最短路</h4><p>这篇题解在咕咕咕的路上，如果你看到了此消息请催博主补锅。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> trie树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj3177Redundant Paths 题解</title>
      <link href="/2019/08/15/poj3177/"/>
      <url>/2019/08/15/poj3177/</url>
      
        <content type="html"><![CDATA[<h5 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h5><p><a href="http://poj.org/problem?id=3177" target="_blank" rel="noopener">传送门</a></p><h4 id="Description-问题描述"><a href="#Description-问题描述" class="headerlink" title="Description 问题描述"></a>Description 问题描述</h4><p>  In order to get from one of the F (1 &lt;= F &lt;= 5,000) grazing fields (which are numbered 1..F) to another field, Bessie and the rest of the herd are forced to cross near the Tree of Rotten Apples. The cows are now tired of often being forced to take a particular path and want to build some new paths so that they will always have a choice of at least two separate routes between any pair of fields. They currently have at least one route between each pair of fields and want to have at least two. Of course, they can only travel on Official Paths when they move from one field to another. </p><p>Given a description of the current set of R (F-1 &lt;= R &lt;= 10,000) paths that each connect exactly two different fields, determine the minimum number of new paths (each of which connects exactly two fields) that must be built so that there are at least two separate routes between any pair of fields. Routes are considered separate if they use none of the same paths, even if they visit the same intermediate field along the way. </p><p>There might already be more than one paths between the same pair of fields, and you may also build a new path that connects the same fields as some other path.  </p><h4 id="Input-输入"><a href="#Input-输入" class="headerlink" title="Input 输入"></a>Input 输入</h4><p>Line 1: Two space-separated integers: F and R </p><p>Lines 2..R+1: Each line contains two space-separated integers which are the fields at the endpoints of some path.  </p><h4 id="Output-输出"><a href="#Output-输出" class="headerlink" title="Output 输出"></a>Output 输出</h4><p>Line 1: A single integer that is the number of new paths that must be built.</p><a id="more"></a><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>7 7<br>1 2<br>2 3<br>3 4<br>2 5<br>4 5<br>5 6<br>5 7</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>2</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>题意简述：求一个无向连通图中还需加入多少条边能构成一个边双连通分量。</p><p>不太好想。假设我们把桥留下来，然后对每个双联通分量进行缩点，因为是连通图，所以就能得到一棵树。</p><p>然后对这个树进行加边操作，可以发现一个结论：需要互通的点一定构成一个环。</p><p>然后画图不严谨证明得到最后答案就是叶子节点个数除以二然后向上取整。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5005</span>,maxm=<span class="number">10005</span>;</span><br><span class="line"><span class="keyword">int</span> tu[maxn][maxn],sum,ans,bkt,dfn[maxn],col[maxn],low[maxn],tot,F,R,head[maxn],cnt,ver[maxm&lt;&lt;<span class="number">1</span>],Nxt[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">ver[++tot]=v,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++cnt;</span><br><span class="line">s.push(u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver[i];</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])tarjan(v,u),low[u]=min(low[u],low[v]); </span><br><span class="line"><span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line">bkt++;</span><br><span class="line"><span class="keyword">while</span>(s.top()!=u)col[s.top()]=bkt,s.pop();</span><br><span class="line">col[u]=bkt,s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("test.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;F,&amp;R);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="keyword">if</span>(tu[u][v])<span class="keyword">continue</span>;</span><br><span class="line">tu[u][v]=tu[v][u]=<span class="number">1</span>;</span><br><span class="line">add(u,v);</span><br><span class="line">add(v,u);</span><br><span class="line">&#125;</span><br><span class="line">tarjan(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=F;u++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> v=ver[i];</span><br><span class="line"><span class="keyword">if</span>(col[u]!=col[v])deg[col[u]]+=<span class="number">1</span>,deg[col[v]]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bkt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(deg[i]==<span class="number">2</span>)sum++;</span><br><span class="line">&#125;</span><br><span class="line">ans=sum/<span class="number">2</span>+sum%<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强连通分量 </tag>
            
            <tag> 缩点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Follow.</title>
      <link href="/2019/08/14/Follow/"/>
      <url>/2019/08/14/Follow/</url>
      
        <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="没有密码的话不用找博主了，不会有的" />    <label for="pass">没有密码的话不用找博主了，不会有的</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+S988XYDVYYvJMRp8Tj8VjbT8/4vvrLnNAUwCQGyzjmZZ3zSWloqqS/bKs3hzaxzkLzfsDUNRKQ2VloLXaBoke1L0tvQ/SS97Uj9H1/ueHD/KguFssyyBvaNVstx5WxmdYd86HA774bNWSF1CTn1kxgOpxO1NgLRZNdBbmlpV3tV/stu7P7V9siE+tPO4ZUV3jf27RqZqusJyIU1Jmw6GRHAQmH9KuTiIdnNhoAj82zGQ2G+HysN1EDBQXQsG6eD3oQTZHKhM1vUNWNiMr12UNVD3AtFtmXZL4QSqHxt5rkATUYOIESvFwTVOR4JQtd/UcbruYY+w7GljffO4x7pKBnJ34ZRlycuK1jM+P3NABD4kGAab3oeU9ojGZb6Q4d6TbRMa+O3R69Sig4rIEjRv8Xu8uyqYISVq333MascMylYDjXLVvulbnxiNLkb5vYNYzsyI7fqwOkZDX0Eah4/IcWcBChIQXI3OOeL2qLuVT5yCv8q2JjIocBK3lN8El9wsKTbP6AKl4nSs8sXmASRWW3CIJPZgtI2m9aLMkU33JMYYhBglZXH9INrE/kJlLd+Jv+bH3q40wbTMi0ueYqeFU+lFyi/m2FOpepsjNKW0whfiC3Gr9g2pXa8emrHl5rWFAcBQL7CCYOgQ3cuPBDEZiu9f628tBuDPq87A45ba5aot7cs+4/EH57PJ/jSGhDbv151B4BGa2sROOB024NKGF7ACD2rk6oHq4Fd8KV0yTLuwMS0jlPRwq8gUzWD4rXbZf3LmW55qWVRVn46h5IfX0P8QJ5Nni/aW4ecIsrRQxvSAwjq0aEA21pnGBwfHp4W7Zi7JYgzEi6BeXOGaTHZYNaTAVd8JSORfFbqoXypL0XyxZ0gnwV/2RwittZPOTE0L1kFZ4vDKnblcVBwUX8sFClfsQ5ojX3TkDVgtd0eKXVUBLXmDM42GYjDqzkgGpRvPvoucPFW9zQsIIUgErjHXREDPbTYLK2qU0RFj5CqoF/Teg/zX+Lu3QQFVEmO7VqAWb/Li6mbCo44EMx4IqiazKJ3azl+KybGkw5gTVnihp++WXwxrAVcoFhNQqf5z4irlhVVuKzKVXIWiWqvSnGbPUZsvHkhYC9jOsgvsrJeBS008GWsHtpHgMsuhPNMLkkY1uKDlTpCBlmwsOawgiM7udRQJPZtMi3PWxEDJ+2f2YpvGxyzMDB7YZmoGoczBkeVxih6S4R5DYYQB6KlG/CsrHS7ZakAXvlTE=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hdu3046 Pleasant sheep and big big wolf 题解</title>
      <link href="/2019/08/14/hdu3046/"/>
      <url>/2019/08/14/hdu3046/</url>
      
        <content type="html"><![CDATA[<p>题目来源：</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3046" target="_blank" rel="noopener">传送门</a></p><h4 id="Problem-Description-问题描述"><a href="#Problem-Description-问题描述" class="headerlink" title="Problem Description 问题描述"></a>Problem Description 问题描述</h4><p>In ZJNU, there is a well-known prairie. And it attracts pleasant sheep and his companions to have a holiday. Big big wolf and his families know about this, and quietly hid in the big lawn. As ZJNU ACM/ICPC team, we have an obligation to protect pleasant sheep and his companions to free from being disturbed by big big wolf. We decided to build a number of unit fence whose length is 1. Any wolf and sheep can not cross the fence. Of course, one grid can only contain an animal.<br>Now, we ask to place the minimum fences to let pleasant sheep and his Companions to free from being disturbed by big big wolf and his companions. </p><p><img src="http://acm.hdu.edu.cn/data/images/vipcon10-1007-1.JPG" alt="1"></p><h4 id="Input输入"><a href="#Input输入" class="headerlink" title="Input输入"></a><strong>Input</strong>输入</h4><p>There are many cases.<br>For every case: </p><p>N and M（N,M&lt;=200）<br>then N*M matrix:<br>0 is empty, and 1 is pleasant sheep and his companions, 2 is big big wolf and his companions.</p><h4 id="Output输出"><a href="#Output输出" class="headerlink" title="Output输出"></a><strong>Output</strong>输出</h4><p>For every case:</p><p>First line output “Case p:”, p is the p-th case;<br>The second line is the answer. </p><a id="more"></a><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>4 6<br>1 0 0 1 0 0<br>0 1 1 0 0 0<br>2 0 0 0 0 0<br>0 2 0 1 1 0</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>Case 1:<br>4</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>题目大意：在一个$(n,m)$的矩阵上，1代表羊，2代表狼，0代表平地，我们有长度为1的一个栅栏（不是放在格子上的，是放在格子和格子之间的空隙上的），问使用最少的栅栏，能够使得狼吃不到羊。(N,M&lt;200)；</p><p>建模还是很好想：狼吃不到羊-&gt;不连通-&gt;最小割-&gt;最大流。</p><p>然后考虑连边：要求栅栏数，那么很明显所有相邻的地皮要连流量为1的边（双向），然后建立源点$S$和汇点$T$，源点朝所有的狼连出流量为$inf$的边，所有的羊朝汇点也连上流量为$inf$的边。</p><p>然后跑最大流就可以了，记住每组数据运行前的初始化。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 999999999</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">int</span> cnt,s,t,n,m,tot,dep[maxn],head[maxn],ver[maxn],edge[maxn],Nxt[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">    ver[++tot]=v,edge[tot]=l,Nxt[tot]=head[u],head[u]=tot;</span><br><span class="line">    ver[++tot]=u,edge[tot]=<span class="number">0</span>,Nxt[tot]=head[v],head[v]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">deal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> res = flow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u]; i ;i=Nxt[i])&#123;</span><br><span class="line">        <span class="keyword">if</span>(edge[i]&amp;&amp;dep[ver[i]]==dep[u]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=deal(ver[i],min(edge[i],res));</span><br><span class="line">            edge[i]-=tmp,edge[i^<span class="number">1</span>]+=tmp,res-=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow-res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divdep</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())    q.pop();</span><br><span class="line">    q.push(s);</span><br><span class="line">    dep[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">        <span class="keyword">if</span>(u==t)    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[u];i;i=Nxt[i])</span><br><span class="line">            <span class="keyword">if</span>(edge[i]&amp;&amp;dep[ver[i]]==<span class="number">-1</span>)    dep[ver[i]]=dep[u]+<span class="number">1</span>,q.push(ver[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> xh=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>)&#123;</span><br><span class="line">        xh++;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        s=<span class="number">0</span>,t=n*m+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);        </span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;n) add(cnt,cnt+m,<span class="number">1</span>),add(cnt+m,cnt,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(j&lt;m) add(cnt,cnt+<span class="number">1</span>,<span class="number">1</span>),add(cnt+<span class="number">1</span>,cnt,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(tmp==<span class="number">2</span>)    add(cnt,s,inf),add(s,cnt,inf);</span><br><span class="line">                <span class="keyword">if</span>(tmp==<span class="number">1</span>)    add(cnt,t,inf),add(t,cnt,inf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(divdep())&#123;</span><br><span class="line">            ans+=deal(s,INT_MAX);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n%d\n"</span>,xh,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流最小割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搬迁公告</title>
      <link href="/2019/08/12/%E6%90%AC%E8%BF%81%E5%85%AC%E5%91%8A/"/>
      <url>/2019/08/12/%E6%90%AC%E8%BF%81%E5%85%AC%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>由于不可抗因素，全站已搬迁，以前的内容只有明文数据储存，会慢慢补上的</p><p>在此祝嘉兴职业技术学院的彭洁伟大佐亲妈暴毙。</p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
